<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mannuan blog</title>
    <link>https://mannuan.github.io/</link>
    <description>Recent content on mannuan blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright> ©2019 mannuan. All Rights Reserved.</copyright>
    <lastBuildDate>Sun, 30 Jun 2019 23:08:18 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chrome设置PAC模式无效的解决方案</title>
      <link>https://mannuan.github.io/post/chrome%E8%AE%BE%E7%BD%AEpac%E6%A8%A1%E5%BC%8F%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sun, 30 Jun 2019 23:08:18 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/chrome%E8%AE%BE%E7%BD%AEpac%E6%A8%A1%E5%BC%8F%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>发现问题 以Ubuntu系统为例，我们通过genpac生成autoproxy.pac文件，然后点击系统设置-&amp;gt;网络-&amp;gt;代理设置-&amp;gt;自动，在输入框中输入file://绝对路径/autoproxy.pac。设置好以后，Chrome应当可以自动切换网络，但是Chrome无法访问google的搜索引擎，而火狐浏览器可以正常访问。
分析问题 出现上面问题的唯一可能就是Chrome设置有误，因此点击设置-&amp;gt;高级设置-&amp;gt;打开代理设置，打开的就是Ubuntu系统的网络设置。因此，我们可以判断自动代理模式设置失效，这里我们就要仔细分析为什么会失效？
解决方案 出现上面问题的主要原因是：Chrome移除对file://和data:协议的支持，目前只能使用http://协议。因此，我们打算使用nginx实现对本地文件的http映射。
安装nginx sudo apt-get install nginx  修改nginx.cnf配置文件 vim /etc/nginx/nginx.conf  在nginx.conf的http{...}代码块中输入:
server{ listen: 80; server_name: 127.0.0.1; location /autoproxy.pac { alias 绝对路径/autoproxy.pac; } }  重启nginx
sudo nginx -s reload  把http://127.0.0.1/autoproxy.pac填写到系统设置-&amp;gt;网络-&amp;gt;代理设置-&amp;gt;自动代理中</description>
    </item>
    
    <item>
      <title>Hugo博客搭建教程</title>
      <link>https://mannuan.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 30 Jun 2019 21:19:27 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</guid>
      <description>Hugo介绍 一种基于 Go 语言的博客框架。
Hugo安装(Mac) brew install hugo  创建博客 hugo new size myblog  安装主题 themes.gohuo.io上面有很多主题可供选择，比如选择m10c
下载m10c $ cd myblog $ git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c  修改配置文件 config.toml 添加一行：
 theme = &amp;quot;m10c&amp;quot;  本地预览 hugo server --buildDrafts  创建第一篇博客 hugo new post/第一篇博客.md  创建的博客在 ./contents/post/下面
使用vscode编辑markdown文件 快捷键 Ctrl+Shift+P，输入 Markwon: Open Preview to the Side，打开预览模式
发布博客到github  下面以我的github用户名manuan为例
  在github创建一个名为 mannuan.github.io 的仓库。
 把当前的博客打包到 public 目录下面
hugo --baseUrl=&amp;quot;https://mannuan.</description>
    </item>
    
    <item>
      <title>原生js实现JSONP</title>
      <link>https://mannuan.github.io/post/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0jsonp/</link>
      <pubDate>Sun, 30 Jun 2019 20:35:25 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0jsonp/</guid>
      <description> 介绍 JSONP是JSON with Padding(填充式JSON或参数式JSON)的简写，是一种非常常用的跨域请求方式。主要原理是利用了script标签可以跨域请求的特性，由其src属性发送请求到服务器，服务器返回JavaScript代码，浏览器接受响应，然后就直接执行了，这和通过script标签引用外部文件的原理是一样的。 JSONP由两部分组成：回调函数和数据，回调函数是当响应到来时应该在页面中调用的函数，回调函数的名字一般在请求中指定。当服务器响应时，服务器端就会把该函数和数据拼成字符串返回
JSONP的请求过程  请求阶段：浏览器创建一个script标签，并给其src赋值(类似http://example.com/api/?callback=jsonpCallback）。 发送请求：当给script的src赋值时，浏览器就会发起一个请求。 数据响应：服务端将要返回的数据作为参数和函数名称拼接在一起(格式类似”jsonpCallback({name: &#39;abc&#39;})”)返回。当浏览器接收到了响应数据，由于发起请求的是script，所以相当于直接调用jsonpCallback方法，并且传入了一个参数。  服务端交互示意图 </description>
    </item>
    
  </channel>
</rss>