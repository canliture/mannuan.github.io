<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on mannuan</title>
    <link>https://mannuan.github.io/</link>
    <description>Recent content in Home on mannuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 01 Jul 2019 20:42:46 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Typography</title>
      <link>https://mannuan.github.io/typography/</link>
      <pubDate>Thu, 28 Sep 2017 08:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/typography/</guid>
      <description>Here is a paragraph. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Heading 2 Another one. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
Heading 3 Yet another, but centered! Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://mannuan.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mannuan.github.io/about/</guid>
      <description>Mínimo is a Spanish word that roughly translate to Minimal.
Minimo is a minimalist theme for Hugo.
Minimo keeps the focus on your content and lets it shine!</description>
    </item>
    
    <item>
      <title>Mac截图的相关设置</title>
      <link>https://mannuan.github.io/post/mac%E6%88%AA%E5%9B%BE%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jul 2019 20:42:46 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/mac%E6%88%AA%E5%9B%BE%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</guid>
      <description>选区域截图默认快捷键 Shift+command+4  默认保存目录 ~/Desktop  修改目录 defaults write com.apple.screencapture location &amp;quot;~/Pictures/ScreenShot&amp;quot;  截图默认后缀 png  修改后缀 defaults write com.apple.screencapture type jpg  删除默认时间后缀 defaults write com.apple.screencapture &amp;quot;include-date&amp;quot; 0  修改默认的文件名称 defaults write com.apple.screencapture name &amp;quot;screenshot&amp;quot;  参看配置 defaults read com.apple.screencapture 输出如下： { &amp;quot;last-messagetrace-stamp&amp;quot; = &amp;quot;583174121.285828&amp;quot;; &amp;quot;last-selection&amp;quot; = { Height = 529; Width = 1041; X = 507; Y = 262; }; &amp;quot;last-selection-display&amp;quot; = 0; location = &amp;quot;~/Pictures/ScreenShot&amp;quot;; name = screenshot; type = jpg; }  缺点分析 mac自带的截图工具，不能修改时间的格式，而且这种格式有空格，不利于作为文件名。虽然可以去除时间后缀，但是时间信息很重要。同时，即使没有时间后缀，生成的图片名中还是存在空格。鉴于上面复杂的问题，我权衡利弊之后果断放弃这个mac自带的截图工具。</description>
    </item>
    
    <item>
      <title>实验十三 利用ip标准访问控制列表acl进行网络流量的控制</title>
      <link>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%8D%81%E4%B8%89-%E5%88%A9%E7%94%A8ip%E6%A0%87%E5%87%86%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8acl%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E7%9A%84%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 01 Jul 2019 19:46:42 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%8D%81%E4%B8%89-%E5%88%A9%E7%94%A8ip%E6%A0%87%E5%87%86%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8acl%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E7%9A%84%E6%8E%A7%E5%88%B6/</guid>
      <description>实验平台 Cisco模拟器，Version：5.3.0.0088
实验目的 掌握路由器上编号的标准 IP 访问列表规则及配置。
需求分析 只允许网段172.16.2.0与172.16.4.0的主机进行通信，不允许172.16.1.0去访问172.16.4.0网段的主机。
实验原理 IP ACL(IP 访问控制列表或IP访问列表)是实现对流经路由器或交换机的数据包根据一定的规则进行过滤，从而提高网络可管理性和安全性。 IP ACL分为两种:标准IP访问列表和扩展IP访问列表。 标准IP访问列表可以根据数据包的源IP地址定义规则，进行数据包的过滤。 扩展IP访问列表可以根据数据包的源IP、目的IP、源端口、目的端口、协议来定义规则，进行数据包的过滤。 IP ACL基于接口进行规则的应用，分为:入栈应用和出栈应用。 入栈应用是指由外部经该接口进行路由器的数据包进行过滤。 出栈应用是指路由器从该接口向外转发数据时进行数据包的过滤。 IP ACL 的配置有两种方式:按照编号的访问列表，按照命名的访问列表。 标准IP访问列表编号范围是1~99、1300~1999，扩展IP访问列表编号范围是100~199、2000~2699。
实验拓扑 选择设备  路由器：2台Generic（从左边数第一个） 主机：3台Generic（从左边数第一个）  实验demo 实验十三-利用ip标准访问控制列表acl进行网络流量的控制.pkt
实验步骤 设置左边的路由器 no Router&amp;gt;en Router#conf t Router(config)#inter loop0 Router(config-if)#ip address 172.16.1.1 255.255.255.0 Router(config-if)#no shut Router(config-if)#inter loop1 Router(config-if)#ip address 172.16.2.1 255.255.255.0 Router(config-if)#no shut Router(config-if)#inter se2/0 Router(config-if)#clock rate 64000 Router(config-if)#ip address 172.16.3.1 255.255.255.0 Router(config-if)#no shut Router(config-if)#exit Router(config)#ip route 0.0.0.0 0.</description>
    </item>
    
    <item>
      <title>实验十二 利用单臂路由实现vlan间的路由</title>
      <link>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%8D%81%E4%BA%8C-%E5%88%A9%E7%94%A8%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0vlan%E9%97%B4%E7%9A%84%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Mon, 01 Jul 2019 19:21:11 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%8D%81%E4%BA%8C-%E5%88%A9%E7%94%A8%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0vlan%E9%97%B4%E7%9A%84%E8%B7%AF%E7%94%B1/</guid>
      <description>实验平台 Cisco模拟器，Version：5.3.0.0088
实验目的 掌握如何路由器端口上划分子接口、封装 Dot1Q(IEEE 802.1Q)协议，实现VLAN间的路由。
需求分析 需要在交换机上配置 VLAN，然后在路由器连接交换机的端口上划分子接口，给相应的VLAN设置IP地址，以实现 VLAN间的路由。
实验原理 在交换网络中，通过 VLAN 对一个物理网络进行了逻辑划分，不同的 VLAN 之间是无法直接访问的，必须通过三层的路由设备进行连接。一般利用路由器或三层交换机来实现不 同 VLAN 之间的互相访问。 将路由器和交换机相连，使用 IEEE 802.1Q 来启动一个路由器上的子接口成为干道模式，就可以利用路由器来实现 VLAN 之间的通信。 路由器可以从某一个VLAN接收数据包并且将这个数据包转发到另外的一个VLAN，要实施VLAN间的路由，必须在一个路由器的物理接口上启用子接口，也就是将以太网物理 接口划分为多个逻辑的、可编址的接口，并配置成干道模式，每个VLAN对应一个这种接口，这样路由器就能够知道如何到达这些互联的VLAN。
实验拓扑 选择设备  交换机：1台2960 路由器：1台Generic（从左边数第一个） 主机：2台Generic（从左边数第一个）  实验demo 实验十二-利用单臂路由实现vlan间路由.pkt
实验步骤 设置交换机 Switch&amp;gt;en Switch#conf t Switch(config)#vlan 10 Switch(config-vlan)#vlan 20 Switch(config-vlan)#inter fa0/1 Switch(config-if)#switchport access vlan 10 Switch(config-if)#inter fa0/2 Switch(config-if)#switchport access vlan 20 Switch(config-if)#inter fa0/3 Switch(config-if)#switchport mode trunk Switch(config-if)#end Switch#sh run  设置路由器 no Router&amp;gt;en Router#conf t Router(config)#inter fa0/0 Router(config-if)#no ip address Router(config-if)#no shut Router(config-if)#inter fa0/0.</description>
    </item>
    
    <item>
      <title>实验十一 Ospf基本配置</title>
      <link>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%8D%81%E4%B8%80-ospf%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jul 2019 18:28:05 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%8D%81%E4%B8%80-ospf%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>实验平台 Cisco模拟器，Version：5.3.0.0088
实验目的 掌握在路由器上配置OSPF单区域。
需求分析 需要在路由器和交换机上配置OSPF路由协议，使全网互通，从而实现信息的共享和传递。
实验原理 OSPF(Open Shortest Path First，开放式最短路径优先)协议，是目前网络中应用最广泛 的路由协议之一。属于内部网关路由协议，能够适应各种规模的网络环境，是典型的链路状 态(link-state)协议。 OSPF 路由协议通过向全网扩散本设备的链路状态信息，使网络中每台设备最终同步一个具有全网链路状态的数据库(LSDB)，然后路由器采用SPF算法，以自己为根，计算到达 其他网络的最短路径，最终形成全网路由信息。 OSPF属于无类路由协议，支持VLSM(变长子网掩码)。OSPF是以组播的形式进行链 路状态的通告的。 在大规模的网络环境中，OSPF支持区域的划分，将网络进行合理规划。划分区域时必须存在area0(骨干区域)。其他区域和骨干区域直接相连，或通过虚链路的方式连接。
实验拓扑 选择设备  交换机：1台3650-24PS 路由器：2台Generic（从左边数第一个）  实验demo 实验十一ospf基本配置.pkt
实验步骤 设置三层交换机 Switch&amp;gt;en Switch(config)#vlan 10 Switch(config-vlan)#vlan 50 Switch(config-vlan)#inter fa0/1 Switch(config-if)#switchport access vlan 10 Switch(config-if)#inter fa0/2 Switch(config-if)#switchport access vlan 10 Switch(config-if)#inter fa0/3 Switch(config-if)#switchport access vlan 50 Switch(config-if)#inter vlan 10 Switch(config-if)#ip address 172.16.1.2 255.255.255.0 Switch(config-if)#no shut Switch(config-if)#inter vlan 50 Switch(config-if)#ip address 172.16.5.1 255.255.255.0 Switch(config-if)#no shut %ospf取别名为123，只能设置为数字 Switch(config-if)#router ospf 123 Switch(config-router)#network 172.</description>
    </item>
    
    <item>
      <title>实验十 RIP路由协议基本配置</title>
      <link>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%8D%81-rip%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jul 2019 17:22:33 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%8D%81-rip%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>实验平台 Cisco模拟器，Version：5.3.0.0088
实验目的 掌握在路由器上如何配置 RIP 路由协议。
需求分析 两台路由器通过快速以太网端口连接在一起，每个路由器上设置2个Loopback端口模拟子网，在所有端口运行RIP路由协议，实现所有子网间的互通。
实验原理 RIP(Routing Information Protocols，路由信息协议)是应用较早、使用较普遍的 IGP(Interior Gateway Protocol，内部网关协议)，适用于小型同类网络，是典型的距离矢量 (distance-vector)协议。 RIP 协议以跳数做为衡量路径开销的，RIP 协议里规定最大跳数为 15。 RIP 在构造路由表时会使用到 3 种计时器:更新计时器、无效计时器、刷新计时器。 它让每台路由器周期性地向每个相邻的邻居发送完整的路由表。路由表包括每个网络或子网 的信息，以及与之相关的度量值。
实验拓扑 选择设备  路由器：2台Generic（从左边数第一个）  实验demo 实验十-RIP路由协议基本配置.pkt
实验步骤 设置左边的路由器 no Router&amp;gt;en Router#conf t Router(config)#inter se2/0 Router(config-if)#ip address 192.168.1.1 255.255.255.0 Router(config-if)#clock rate 64000 Router(config-if)#no shut Router(config-if)#inter loop0 Router(config-if)#ip address 172.16.1.1 255.255.255.0 Router(config-if)#inter loop1 Router(config-if)#ip address 172.16.2.1 255.255.255.0 Router(config-if)#router rip Router(config-router)#network 172.16.0.0 Router(config-router)#network 192.168.1.0 Router(config-router)#end Router#sh run  设置右边的路由器 no Router&amp;gt;en Router#conf t Router(config)#inter se2/0 Router(config-if)#ip address 192.</description>
    </item>
    
    <item>
      <title>实验六 跨交换机实现vlan间的路由</title>
      <link>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%85%AD-%E8%B7%A8%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%AE%9E%E7%8E%B0vlan%E9%97%B4%E7%9A%84%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Mon, 01 Jul 2019 10:50:39 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%85%AD-%E8%B7%A8%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%AE%9E%E7%8E%B0vlan%E9%97%B4%E7%9A%84%E8%B7%AF%E7%94%B1/</guid>
      <description>实验平台 Cisco模拟器，Version：5.3.0.0088
 当前的实验无法在Version：6.0.0.0045上测试成功
 实验目的 利用三层交换机跨交换机实现VLAN间路由。
需求分析 在二层交换机上划分VLAN配置Trunk实现不同VLAN的主机接入，在三层交换机上划分VLAN配置Trunk并配置SVI接口实现不同VLAN间路由。
实验原理 在二层交换机上划分VLAN可实现不同VLAN的主机接入，而VLAN间的主机通信为不同网段间的通信，需要通过三层设备对数据进行路由转发才可以实现，通过在三层交换机上为各VLAN配置SVI接口，利用三层交换机的路由功能可以实现VLAN间的路由。
实验拓扑 选择设备  交换机：1台3560-24PS，2台2960 移动终端：2台Generic（从左边数第一个）  实验demo 实验六-跨交换机实现vlan间路由.pkt
实验步骤 设置最上面的交换机 Switch&amp;gt;en Switch#conf t Switch(config)#vlan 10 Switch(config-vlan)#vlan 20 Switch(config)#inter vlan 10 Switch(config-if)#ip address 192.168.10.1 255.255.255.0 Switch(config-if)#no shut Switch(config-if)#inter vlan 20 Switch(config-if)#ip address 192.168.20.1 255.255.255.0 Switch(config-if)#no shut Switch(config-if)#end Switch#sh run  设置左边的2960交换机 Switch&amp;gt;en Switch#conf t Switch(config)#inter fa0/2 Switch(config-if)#switch mode trunk Switch(config-if)#vlan 10 Switch(config-vlan)#inter fa0/1 Switch(config-if)#switchport access vlan 10 Switch(config-if)#end Switch#sh run  设置右边的2960交换机 Switch&amp;gt;en Switch#conf t Switch(config)#inter fa0/2 Switch(config-if)#switch mode trunk Switch(config-if)#vlan 20 Switch(config-vlan)#inter fa0/1 Switch(config-if)#switchport access vlan 20 Switch(config-if)#end Switch#sh run  设置左边的主机 1、打开&amp;rdquo;IP Configure&amp;rdquo;</description>
    </item>
    
    <item>
      <title>实验九 配置动态nat</title>
      <link>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E4%B9%9D-%E9%85%8D%E7%BD%AE%E5%8A%A8%E6%80%81nat/</link>
      <pubDate>Mon, 01 Jul 2019 10:11:21 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E4%B9%9D-%E9%85%8D%E7%BD%AE%E5%8A%A8%E6%80%81nat/</guid>
      <description>实验平台 Cisco模拟器，Version：5.3.0.0088
实验目的 配置网络地址变换，为私有地址的用户提供到外部网络的资源的访问。
需求分析 ISP 提供商给 IT 企业的一段公共 IP 地址的地址段为 200.1.1.200~100.1.1.210，需要内网使用这段址去访问 Internet，考虑到包括安全在内的诸多因素，公司希望对外部隐藏内部 网络。
实验原理 在路由器上定义内网与外网接口，利用 NAT 地址池实现内网对外网的访问，并把内网 隐藏起来。
实验拓扑 选择设备  交换机：1台2960 移动终端：2台Generic（从左边数第一个） 路由器：2台Generic（从左边数第一个）  实验demo 实验九-配置动态nat.pkt
实验步骤 设置左边的路由器 no Router&amp;gt;en Router#conf t Router(config)#inter se2/0 Router(config-if)#ip address 200.1.1.2 255.255.255.0 Router(config-if)#clock rate 64000 Router(config-if)#no shutdown Router(config-if)#end Router#sh run  设置右边的路由器 no Router&amp;gt;en Router#conf t Router(config)#ip route 0.0.0.0 0.0.0.0 se2/0 Router(config)#access-list 10 permit 172.16.1.0 0.0.0.255 Router(config)#ip nat pool test 200.1.1.200 200.</description>
    </item>
    
    <item>
      <title>实验八 配置静态nat</title>
      <link>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%85%AB-%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81nat/</link>
      <pubDate>Mon, 01 Jul 2019 09:06:25 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/%E5%AE%9E%E9%AA%8C%E5%85%AB-%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81nat/</guid>
      <description>实验平台 Cisco模拟器，Version：5.3.0.0088
实验目的 配置网络地址变换，提供到公司共享服务器的可靠外部访问，即把内网的ip映射到公网ip。
需求分析 公司需要将 172.16.1.5 和 172.16.1.6 两台主机作为共享服务器，需要外网能够访问，考虑到包括安全在内的诸多因素，公司希望对外部隐藏内部网络。
实验原理 在路由器上把 172.16.1.5、172.16.1.6 两台主机静态映射到外部，把内网隐藏起来。
实验拓扑 选择设备  交换机：1台2960 移动终端：2台Generic（从左边数第一个） 路由器：2台Generic（从左边数第一个）  实验demo 实验八-配置静态nat.pkt
实验步骤 设置左边的路由器 no Router&amp;gt;en Router#conf t Router(config)#inter se2/0 Router(config-if)#ip address 200.1.1.2 255.255.255.0 Router(config-if)#clock rate 64000 Router(config-if)#no shutdown Router(config-if)#end Router#sh run  设置右边的路由器 no Router&amp;gt;en Router#conf t Router(config)#ip route 0.0.0.0 0.0.0.0 se2/0 Router(config)#ip nat inside source static 172.16.1.5 200.1.1.80 Router(config)#ip nat inside source static 172.16.1.6 200.1.1.81 Router(config)#inter se2/0 Router(config-if)#ip address 200.</description>
    </item>
    
    <item>
      <title>Chrome设置PAC模式无效的解决方案</title>
      <link>https://mannuan.github.io/post/chrome%E8%AE%BE%E7%BD%AEpac%E6%A8%A1%E5%BC%8F%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sun, 30 Jun 2019 23:08:18 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/chrome%E8%AE%BE%E7%BD%AEpac%E6%A8%A1%E5%BC%8F%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>发现问题 以Ubuntu系统为例，我们通过genpac生成autoproxy.pac文件，然后点击系统设置-&amp;gt;网络-&amp;gt;代理设置-&amp;gt;自动，在输入框中输入file://绝对路径/autoproxy.pac。设置好以后，Chrome应当可以自动切换网络，但是Chrome无法访问google的搜索引擎，而火狐浏览器可以正常访问。
分析问题 出现上面问题的唯一可能就是Chrome设置有误，因此点击设置-&amp;gt;高级设置-&amp;gt;打开代理设置，打开的就是Ubuntu系统的网络设置。因此，我们可以判断自动代理模式设置失效，这里我们就要仔细分析为什么会失效？
解决方案 出现上面问题的主要原因是：Chrome移除对file://和data:协议的支持，目前只能使用http://协议。因此，我们打算使用nginx实现对本地文件的http映射。
安装nginx sudo apt-get install nginx  修改nginx.cnf配置文件 vim /etc/nginx/nginx.conf  在nginx.conf的http{...}代码块中输入:
server{ listen: 80; server_name: 127.0.0.1; location /autoproxy.pac { alias 绝对路径/autoproxy.pac; } }  重启nginx
sudo nginx -s reload  把http://127.0.0.1/autoproxy.pac填写到系统设置-&amp;gt;网络-&amp;gt;代理设置-&amp;gt;自动代理中</description>
    </item>
    
    <item>
      <title>Hugo博客搭建教程</title>
      <link>https://mannuan.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 30 Jun 2019 21:19:27 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</guid>
      <description>Hugo介绍 一种基于 Go 语言的博客框架。
Hugo安装(Mac) brew install hugo  创建博客  下面以我的github用户名manuan为例
 hugo new site mannuan.github.io  安装主题 themes.gohuo.io上面有很多主题可供选择，比如选择m10c
下载m10c $ cd myblog $ git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c  修改配置文件 config.toml 添加一行：
theme = &amp;quot;m10c&amp;quot;  本地预览 hugo server -D  创建第一篇博客 hugo new post/第一篇博客.md  创建的博客在 contents/post/下面
使用vscode编辑markdown文件 快捷键 Ctrl+Shift+P，输入 Markwon: Open Preview to the Side，打开预览模式
发布博客到github  在github创建一个名为 mannuan.github.io 的仓库。
 把当前的博客打包到 public 目录下面
hugo --baseUrl=&amp;quot;https://mannuan.github.io/&amp;quot; -D  把 public 里面的内容同步到github</description>
    </item>
    
    <item>
      <title>原生js实现JSONP</title>
      <link>https://mannuan.github.io/post/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0jsonp/</link>
      <pubDate>Sun, 30 Jun 2019 20:35:25 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0jsonp/</guid>
      <description> 介绍 JSONP是JSON with Padding(填充式JSON或参数式JSON)的简写，是一种非常常用的跨域请求方式。主要原理是利用了script标签可以跨域请求的特性，由其src属性发送请求到服务器，服务器返回JavaScript代码，浏览器接受响应，然后就直接执行了，这和通过script标签引用外部文件的原理是一样的。 JSONP由两部分组成：回调函数和数据，回调函数是当响应到来时应该在页面中调用的函数，回调函数的名字一般在请求中指定。当服务器响应时，服务器端就会把该函数和数据拼成字符串返回
JSONP的请求过程  请求阶段：浏览器创建一个script标签，并给其src赋值(类似http://example.com/api/?callback=jsonpCallback）。 发送请求：当给script的src赋值时，浏览器就会发起一个请求。 数据响应：服务端将要返回的数据作为参数和函数名称拼接在一起(格式类似”jsonpCallback({name: &#39;abc&#39;})”)返回。当浏览器接收到了响应数据，由于发起请求的是script，所以相当于直接调用jsonpCallback方法，并且传入了一个参数。  服务端交互示意图 </description>
    </item>
    
    <item>
      <title>KaTeX Support</title>
      <link>https://mannuan.github.io/docs/katex-support/</link>
      <pubDate>Sun, 12 Aug 2018 12:30:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/katex-support/</guid>
      <description>For enabling KaTeX, add this to your content&amp;rsquo;s frontmatter:
--- katex: true --- KaTeX Syntax for Markdown In your Markdown content, use \\(&amp;hellip;\\) delimiters for in-line mathematics.
For mathematics blocks you can use either $$&amp;hellip;$$ or \\[&amp;hellip;\\] as delimiters.
Here&amp;rsquo;s an example Markdown content:
When \\( a \ne 0 \\), there are two solutions to $$ ax^2 + bx + c = 0 $$ and they are: \\[ x = {-b \pm \sqrt{b^2-4ac} \over 2a} \\] Output:</description>
    </item>
    
    <item>
      <title>Search: Fuse.js</title>
      <link>https://mannuan.github.io/docs/search-fuse-js/</link>
      <pubDate>Fri, 06 Jul 2018 01:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/search-fuse-js/</guid>
      <description> Configure Fuse.js Search Client Select Fuse.js as the search client in your config.toml file:
[params.search] client = &amp;#34;fuse&amp;#34;</description>
    </item>
    
    <item>
      <title>Search: Algolia</title>
      <link>https://mannuan.github.io/docs/search-algolia/</link>
      <pubDate>Thu, 05 Jul 2018 23:30:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/search-algolia/</guid>
      <description>Configure Algolia Search Client Select Algolia as the search client in your config.toml file:
[params.search] client = &amp;#34;algolia&amp;#34; Also, add configuration options for Algolia:
[params.search.algolia] appId = &amp;#34;&amp;#34; indexName = &amp;#34;&amp;#34; searchApiKey = &amp;#34;&amp;#34;  params.search.algolia [Map]:  appId [String]: Algolia Application ID indexName [String]: Name for Algolia Indices
default: minimo_site searchApiKey [String]: Algolia Search-Only API Key   You&amp;rsquo;ll find various information related to your Algolia account in the Algolia Dashboard.</description>
    </item>
    
    <item>
      <title>Search: Lunr.js</title>
      <link>https://mannuan.github.io/docs/search-lunr-js/</link>
      <pubDate>Thu, 05 Jul 2018 20:30:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/search-lunr-js/</guid>
      <description>Configure Lunr.js Search Client Select Lunr.js as the search client in your config.toml file:
[params.search] client = &amp;#34;lunr&amp;#34; Generate Search Index for Lunr.js Lunr.js will need a search index for searching across your site. So, you&amp;rsquo;ll need to generate that search index for Lunr.js before you deploy your site.
Minimo comes with a script for generating the search index for Lunr.js: /scripts/generate-search-index-lunr.js.
Install Dependencies Node.js must be installed on your system for using the generator script.</description>
    </item>
    
    <item>
      <title>Search Support</title>
      <link>https://mannuan.github.io/docs/search-support/</link>
      <pubDate>Thu, 05 Jul 2018 20:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/search-support/</guid>
      <description>Minimo supports the following clients for the search feature:
 Algolia Fuse.js Lunr.js  Follow the following steps for enabling search in your site.
Create Search Page First of all, you&amp;rsquo;ll need to create a search page.
Create a markdown file under /content/page/ directory with the filename search. If your site is multilingual, you can include language code in the filename. For example:
 /content/page/search.md /content/page/search.en.md  Add the following options in the frontmatter:</description>
    </item>
    
    <item>
      <title>Comments Support</title>
      <link>https://mannuan.github.io/docs/comments-support/</link>
      <pubDate>Thu, 29 Mar 2018 09:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/comments-support/</guid>
      <description>Minimo has support for comments baked into it.
Enable/Disable Comments Globally For enabling or disabling comments globally, check the following setting in your config.toml file:
[params.comments] enable = false  params.comments [Map]:  enable [Boolean]: Enable/Disable comments globally   For Specific Posts The global .Site.Params.comments.enable setting can be overridden for specific posts in their content&amp;rsquo;s frontmatter with this option:
--- comments: true ---  comments [Boolean]: Enable/Disable comments for specific posts  Of course, you&amp;rsquo;ll also need to setup a comment system ( Disqus or Staticman ).</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://mannuan.github.io/docs/emoji-support/</link>
      <pubDate>Tue, 27 Feb 2018 21:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/emoji-support/</guid>
      <description>First of all, if you really want emojis, set the enableEmoji setting to true in your config.toml file:
enableEmoji = true This will enable Hugo to find Emoji Shorthands in your content files and render them as Unicode Emoji Characters.
For example:
 will become 😃  No, it&amp;rsquo;ll probably not be that colorful! Unless your device&amp;rsquo;s operating system natively supports colorful emojis, you will see a black &amp;amp; white one instead.</description>
    </item>
    
    <item>
      <title>MathJax Support</title>
      <link>https://mannuan.github.io/docs/mathjax-support/</link>
      <pubDate>Tue, 27 Feb 2018 18:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/mathjax-support/</guid>
      <description>For enabling MathJax, add this to your content&amp;rsquo;s frontmatter:
--- mathjax: true --- MathJax Syntax for Markdown In your Markdown content, use \\(&amp;hellip;\\) delimiters for in-line mathematics.
For mathematics blocks you can use either $$&amp;hellip;$$ or \\[&amp;hellip;\\] as delimiters.
Here&amp;rsquo;s an example Markdown content:
When \\( a \ne 0 \\), there are two solutions to $$ ax^2 + bx + c = 0 $$ and they are: \\[ x = {-b \pm \sqrt{b^2-4ac} \over 2a} \\] Output:</description>
    </item>
    
    <item>
      <title>Sidebar</title>
      <link>https://mannuan.github.io/docs/sidebar/</link>
      <pubDate>Wed, 07 Feb 2018 19:15:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/sidebar/</guid>
      <description>Enabling Sidebar For enabling Sidebar, use the following configuration options in your config.toml file:
[params.sidebar] enable = true  params.sidebar [Map]:  enable [Boolean]: Switch for enabling sidebar   Adding Widgets to Sidebar For adding Widgets to the Sidebar, check the Widgets documentation.</description>
    </item>
    
    <item>
      <title>Widgets</title>
      <link>https://mannuan.github.io/docs/widgets/</link>
      <pubDate>Wed, 07 Feb 2018 18:30:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/widgets/</guid>
      <description>Minimo supports Widgets that you can place on specific Widget Areas.
Available Widgets Minimo has the following built-in Widgets:
   Name Slug     1. About about   2. Breadcrumbs breadcrumbs   3. Recent Posts recent_posts   4. Search search   5. Sidebar Menu sidebar_menu   6. Social Menu social_menu   7. Taxonomy Cloud taxonomy_cloud    Widget Configuration Options Here are the configuration options available for the Widgets:</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://mannuan.github.io/docs/shortcodes/</link>
      <pubDate>Thu, 05 Oct 2017 20:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/shortcodes/</guid>
      <description>Minimo comes with several shortcodes built-in.
Shortcode: center Center align you content.
center: Parameters  Markdown content between opening and closing tags.  center: Usage Example {{&amp;lt; center &amp;gt;}} _Center Aligned Text_ {{&amp;lt; /center &amp;gt;}} Output
Center Aligned Text  Shortcode: convo Renders conversation blocks.
convo: Parameters  sep [String] (optional): seperator between person and text (default: &amp;ldquo;:&amp;rdquo;)  convo: Inner Syntax person :: text You can remove the person part, if you want.</description>
    </item>
    
    <item>
      <title>Cover Image</title>
      <link>https://mannuan.github.io/docs/cover-image/</link>
      <pubDate>Sat, 30 Sep 2017 14:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/cover-image/</guid>
      <description>You can add cover image to your contents with the cover paramameter in the content&amp;rsquo;s front-matter.
You can directly provide the image url:
--- cover: /images/eden-farm-children-s-village.jpg ---  cover [String]: path/url of the cover image  Or you can provide additional information:
--- cover: image: /images/eden-farm-children-s-village.jpg alternate: Picture of a yellow wall with a blue window in the upper-left corner caption: Eden Farm Children&amp;#39;s Village by Gareth Harper on Unsplash style: full ---  cover [Map]:  image [String]: path/url of the cover image alternate [String]: alternate text for the image caption [String]: caption for the cover image style [String]: full / wide / normal   </description>
    </item>
    
    <item>
      <title>Translation Support</title>
      <link>https://mannuan.github.io/docs/translation/</link>
      <pubDate>Wed, 27 Sep 2017 14:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/translation/</guid>
      <description>You can translate Minimo in your own language!
For example, if you want to translate Minimo in Spanish, you will have to add this to your site&amp;rsquo;s config file:
[languages.es] lang = &amp;#34;es&amp;#34; languageName = &amp;#34;Spanish&amp;#34; weight = 1 Then create a folder named /i18n/ in your site&amp;rsquo;s root. And create a file /i18n/es.toml with the translated strings.
For reference template you can see the en.toml file.
If you want your translation file to be included in Minimo repository, feel free to create a pull request.</description>
    </item>
    
    <item>
      <title>Syntax Highlighting</title>
      <link>https://mannuan.github.io/docs/syntax-highlighting/</link>
      <pubDate>Wed, 27 Sep 2017 12:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/syntax-highlighting/</guid>
      <description>Hugo uses Chroma as it&amp;rsquo;s built-in syntax-highlighter.
For detailed information about Syntax Highlighting in Hugo, check the Hugo&amp;rsquo;s Syntax Highlighting Documentation.</description>
    </item>
    
    <item>
      <title>Menus Setup Guide</title>
      <link>https://mannuan.github.io/docs/menus/</link>
      <pubDate>Wed, 27 Sep 2017 10:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/menus/</guid>
      <description>Minimo has three menus.
 Main Menu Sidebar Menu Social Menu  Main Menu name: main
Main menu is located at the top of the site.
Check Hugo&amp;rsquo;s Menus Documentation for information about managing this menu.
You can hide the Main Menu using the following option in your config.toml file:
[params.settings] hideMainMenu = true Sidebar Menu name: sidebar
Social Menu is available as Widget: sidebar_menu. Add it to the sidebar Widget Area to use it.</description>
    </item>
    
    <item>
      <title>Opengraph Support</title>
      <link>https://mannuan.github.io/docs/opengraph/</link>
      <pubDate>Tue, 26 Sep 2017 08:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/opengraph/</guid>
      <description>Minimo has built-in support for Opengraph tags. It will pick up most of the things from your contents&amp;rsquo; front-matters &amp;amp; Hugo configuration.
You can use these options in you content&amp;rsquo;s front-matter:
--- audios: [] # for og:audio tags images: [] # for og:image tags videos: [] # for og:video tags ---  audios [Array of Strings]: path/url of audio files images [Array of Strings]: path/url of image files videos [Array of Strings]: path/url of video files  N.</description>
    </item>
    
    <item>
      <title>Authors Setup Guide</title>
      <link>https://mannuan.github.io/docs/authors/</link>
      <pubDate>Tue, 26 Sep 2017 06:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/authors/</guid>
      <description>Minimo supports multiple authors for your site. Just make sure you have the following configuration in your site&amp;rsquo;s config.toml:
[taxonomies] author = &amp;#34;authors&amp;#34; Minimo treats Authors as a Hugo Taxonomy.
Author&amp;rsquo;s Profile For adding an author to your site:
 Create data/authors folder in your site&amp;rsquo;s root directory Create a file with the filename format: &amp;lt;username&amp;gt;.toml  Now, add information about the author using the structure below:
/data/authors/muniftanjim.toml
id = &amp;#34;muniftanjim&amp;#34; [email] username = &amp;#34;muniftanjim&amp;#34; host = &amp;#34;gmail.</description>
    </item>
    
    <item>
      <title>Configuration File: config.toml</title>
      <link>https://mannuan.github.io/docs/config-file/</link>
      <pubDate>Mon, 25 Sep 2017 08:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/config-file/</guid>
      <description>This is the Minimo&amp;rsquo;s configuration file ( config.toml ) file of this site:
baseURL = &amp;#34;https://mannuan.github.io/&amp;#34; title = &amp;#34;mannuan&amp;#34; # for smart copyright line, leave this blank and check [params.copyright] copyright = &amp;#34;&amp;#34; theme = &amp;#34;minimo&amp;#34; disqusShortname = &amp;#34;&amp;#34; googleAnalytics = &amp;#34;&amp;#34; Paginate = 10 preserveTaxonomyNames = true enableRobotsTXT = true # generate robots.txt # Syntax Highlighting ( https://gohugo.io/content-management/syntax-highlighting/ ) pygmentsCodefences = true enableEmoji = true # Missing translations will default to this content language defaultContentLanguage = &amp;#34;en&amp;#34; [params.</description>
    </item>
    
    <item>
      <title>Updating Guide</title>
      <link>https://mannuan.github.io/docs/updating/</link>
      <pubDate>Mon, 25 Sep 2017 06:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/updating/</guid>
      <description>Updating Minimo Update Minimo clone Just replace the themes/minimo folder with the latest version of Minimo clone, i.e. delete the old folder and clone again:
rm -rf themes/minimo git clone --depth 1 https://github.com/MunifTanjim/minimo themes/minimo Then, commit the changes:
git add themes/minimo git commit -m &amp;#34;update [theme]: minimo&amp;#34; Update Minimo submodule cd themes/minimo git checkout master git fetch &amp;amp;&amp;amp; git pull cd ../.. git add themes/minimo git commit -m &amp;#34;update [theme]: minimo&amp;#34; To Do After Updating Minimo After updating Minimo, always check that your site&amp;rsquo;s config.</description>
    </item>
    
    <item>
      <title>Installation Guide</title>
      <link>https://mannuan.github.io/docs/installation/</link>
      <pubDate>Mon, 25 Sep 2017 02:00:00 +0600</pubDate>
      
      <guid>https://mannuan.github.io/docs/installation/</guid>
      <description>First of all you will need to setup a Hugo site. You can follow the Hugo&amp;rsquo;s Quick Start Guide for that.
After you&amp;rsquo;re done with that, it&amp;rsquo;s time for installing Minimo!
Installing Minimo There are two different ways you can install Minimo:
 As clone As submodule  The second method is recommended.
Install Minimo as clone With this method, you will simply clone it. And a copy of Minimo&amp;rsquo;s repository will be stored with the rest of you site.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://mannuan.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mannuan.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>