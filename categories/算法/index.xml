<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on mannuan</title>
    <link>https://mannuan.github.io/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on mannuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 03 Sep 2019 21:14:42 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>前端面试常见算法总结</title>
      <link>https://mannuan.github.io/post/20190903211442/</link>
      <pubDate>Tue, 03 Sep 2019 21:14:42 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190903211442/</guid>
      <description> 前端面试常见算法总结  0. 前言 做算法题最好用的无疑是leetcode, 上面基本上涵盖了几乎可以想到的所有题目，另外playground也挺好用的，可以自定义代码，下面我总结的算法题的代码都放在leetcode上面
 单词回文  排序算法 冒泡排序 选择排序 插入排序 归并排序 希尔排序 快速排序 堆排序  数组  数组去重(考虑整数和字符) 找出数组的最大差值 随机获取数组中的元素 生成从0到指定值的数字数组 打乱数组 对象转换为数组 验证是否为数组 获取数组中的最大值或最小值 清空数组 不要直接使用delete来删除数组中的元素 实现两个排序数组的合并 找出数组中出现次数多的元素和它的下标 若干个数字,怎么选出最大的k个 n长的数组放入n+1个数，不能重复，找出那个缺失的数   频率统计 统计一个字符出现最多的字母  交换 整数交换  实现类似功能 实现类似getElementsByClassName的功能  二叉树 二叉查找树 二叉平衡树 二叉树的镜像  随机 获取指定范围内的随机数 随机生成指定长度的字符串 生成指定长度的随机字母数字字符串  计算精度 保留指定小数位  排除条件 排除null和undefined  链表 链表反转 输出单链表的倒数第k个节点 链表问题,要求用es6写 单向链表怎么查找有没有环  大数计算 大数相加 大数相乘  递归 手写一个递归函数 尾递归阶乘  查找 二分查找  正则表达式 正则表达式验证邮箱 正则表达式验证ipv4,ipv6,mac 正则表达式判断url 去除字符串前后的空格  字符串 统计一个字符串出现频率最高的字母/数字  </description>
    </item>
    
    <item>
      <title>项目分配</title>
      <link>https://mannuan.github.io/post/20190827212757/</link>
      <pubDate>Tue, 27 Aug 2019 21:27:58 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190827212757/</guid>
      <description> 项目分配 时间限制：C/C++语言 1000MS；其他语言 3000MS 内存限制：C/C++语言 65536KB；其他语言 589824KB
题目描述： 某公司雇有N名员工，每名员工可以负责多个项目，但一个项目只能交由一名员工负责。现在该公司接到M个项目，令A_{i,j}表示第i名员工负责第j个项目所带来的收益，那么如果项目分配得当，总收益最大是多少？
输入 第一行包含两个整数N和M，1≤N，M≤1000。
接下来N行，每行包含M个整数，第i行的第j个整数表示A{i,j}，1≤A{i,j}≤1000。
输出 输出总收益的最大值。
样例输入 3 3
1 3 3
2 2 2
3 2 1
样例输出 9
# include&amp;lt;iostream&amp;gt;  using namespace std; int n,m,cost =0; int x[1001],c[1001][1001]; void work(int i, int count){ if(i&amp;gt;n&amp;amp;&amp;amp;count&amp;gt;cost){ cost=count; return ; } if(count&amp;gt;cost){ for(int j=1;j&amp;lt;=m;j++){ if(x[j]==0){ x[j] = 1; work(i+1, count+c[i][j]); x[j] =0; } } } } int main(){ cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m; for(int i=1;i&amp;lt;=n;i++){ for(int j=1;j&amp;lt;=m;j++){ cin&amp;gt;&amp;gt;c[i][j]; c[i][j] = -c[i][j]; x[j] = 0; } cost+=c[i][i]; } work(1, 0); cout&amp;lt;&amp;lt;-cost&amp;lt;&amp;lt;endl; return 0; } </description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://mannuan.github.io/post/20190827152635/</link>
      <pubDate>Tue, 27 Aug 2019 15:26:35 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190827152635/</guid>
      <description>链表 定义 本质是线性表</description>
    </item>
    
    <item>
      <title>数组去重</title>
      <link>https://mannuan.github.io/post/20190826170328/</link>
      <pubDate>Mon, 26 Aug 2019 17:03:28 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190826170328/</guid>
      <description>数组去重 最简洁的做法 function unique(arr){ return [...new Set(arr)]; }  对象属性的唯一性 function unique(arr){ let res = []; let obj = new Object(); arr.forEach(e =&amp;gt; { if(!obj[e]){ obj[e] = 1; res.push(e); } }); return res; }  一般的做法 function unique(arr){ let seen = []; arr.forEach(e =&amp;gt; { if(seen.indexOf(e) &amp;lt; 0){ seen.push(e); } }); return seen; } console.log(unique([1,1,1,1,3,4]));  python实现-普通做法 def unique(arr): seen = [] for i in arr: if i not in seen: seen.</description>
    </item>
    
    <item>
      <title>判断一个单词是否是回文</title>
      <link>https://mannuan.github.io/post/20190826162047/</link>
      <pubDate>Mon, 26 Aug 2019 16:20:48 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190826162047/</guid>
      <description> 判断一个单词是否是回文  回文是指把相同的词汇或句子，在下文中调换位置或颠倒过来，产生首尾回环的情趣，叫做回文，也叫回环。比如 mamam redivider.
很多人拿到这样的题目非常容易想到用for 将字符串颠倒字母顺序然后匹配就行了。其实重要的考察的就是对于reverse的实现。其实我们可以利用现成的函数，将字符串转换成数组，这个思路很重要，我们可以拥有更多的自由度去进行字符串的一些操作。
 function isHuiWen(str){ return str == str.split(&amp;#39;&amp;#39;).reverse().join(&amp;#39;&amp;#39;); } def isHuiWen(_str): return _str == &amp;#34;&amp;#34;.join(_str.split()[::-1])# include&amp;lt;iostream&amp;gt;  # include&amp;lt;cstring&amp;gt;  # include&amp;lt;cstdlib&amp;gt;  using namespace std; int main(){ string str; bool flag = true; cin&amp;gt;&amp;gt;str; for(int i=0,j=str.size()-1;i&amp;lt;str.size();i++, j--){ if(str[i] != str[j]){ flag = false; } } if(flag){ cout&amp;lt;&amp;lt;&amp;#34;是回文&amp;#34;&amp;lt;&amp;lt;endl; }else{ cout&amp;lt;&amp;lt;&amp;#34;不是回文&amp;#34;&amp;lt;&amp;lt;endl; } return 0; } </description>
    </item>
    
    <item>
      <title>姓名排序</title>
      <link>https://mannuan.github.io/post/20190825163450/</link>
      <pubDate>Sun, 25 Aug 2019 16:34:50 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190825163450/</guid>
      <description>姓名排序 时间限制：C/C++语言 3000MS；其他语言 5000MS
内存限制：C/C++语言 131072KB；其他语言 655360KB
题目描述： 马上就要开学了，教务处的老师拿到了新生的名单，现在他需要根据考生的姓名录入一个拼音版的新名单。
老师录入时，需要输入姓和名(例如：ZHANG SAN，字母均为大写，姓名以空格隔开)，并且要将这些人按一定规则排序。
排序的方式如下：
首先，按照该姓的出现次数排序，即：姓出现次数多的人先排序
其次，若两个人的姓出现的次数一样多（或者是同一个姓），按照原名单的顺序。
输入 输入包括多行，每一行两个字符串，代表一个人的姓和名
输出 输出排序后的名单
样例输入 ZHANG SAN
LI SI
WANG WU
WANG LIU
WANG QI
ZHANG WU
LI WU
样例输出 WANG WU
WANG LIU
WANG QI
ZHANG SAN
LI SI
ZHANG WU
LI WU
提示 范围 输入只包含大写字母，最多10000行，每行最多50个字符
#include&amp;lt;bits/stdc++.h&amp;gt; typedef long long ll; const int maxn = 1e4 + 5; const int INF = 0x3f3f3f3f; const int MOD = 1e9 + 7; using namespace std; struct node { string x, m; }f[maxn]; map&amp;lt;string, int&amp;gt;mp; bool cmp(node a, node b) { return mp[a.</description>
    </item>
    
    <item>
      <title>最优打字策略</title>
      <link>https://mannuan.github.io/post/20190825161517/</link>
      <pubDate>Sun, 25 Aug 2019 16:15:18 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190825161517/</guid>
      <description>最优打字策略 题目描述 在英文的输入中，我们经常会遇到大小写切换的问题，频繁切换大小写会增加我们的按键次数，也会降低我们的打字效率。
众所周知，切换大小写有两种方式，一种是按下“caps locks”，也就是大写锁定键，这样一来，之后的输入模式都会被切换。另一种是同时按下shift和需要打印的字母，可以临时切换大小写(算作按下两个键)。
已知初始状态下，打字模式是小写，现在给出需要打印的字符串(区分大小写)，请你计算出最少需按键多少次才能打印出来。
输入 输入第一行仅包含一个正整数n，表示字符串的长度(1&amp;lt;=n&amp;lt;=1000000)。
输入第二行包含一个长度为n的字符串，仅包含大小写字母。
输出 输出仅包含一个正整数，即最少的按键次数。
样例输入
6
AaAAAA
样例输出
8
#include&amp;lt;bits/stdc++.h&amp;gt; typedef long long ll; const int maxn = 1e3 + 5; const int INF = 0x3f3f3f3f; const int MOD = 1e9 + 7; using namespace std; int main() { int n, flag = 0, sum; string p; cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; p; sum = p.length(); for (int i = 0; i &amp;lt; p.</description>
    </item>
    
    <item>
      <title>反转链表</title>
      <link>https://mannuan.github.io/post/20190824230403/</link>
      <pubDate>Sat, 24 Aug 2019 23:04:03 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190824230403/</guid>
      <description>反转链表 参考视频地址 视频地址
非递归实现 过程描述 需要两个指针prev, head在链表中进行移动；另外还需要一个指针save,用来保存head节点的下一个节点
举例说明 初始化的时候  prev 1(head)-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;null  prev = null head = 1 save = null   第一次循环 改变指针的指向  prev&amp;lt;-1(head) 2-&amp;gt;3-&amp;gt;4-&amp;gt;null  prev = null head = 1 save = 2   往右平移prev,head  null&amp;lt;-1(prev) 2(head)-&amp;gt;3-&amp;gt;4-&amp;gt;null  prev = 1 head = 2 save = 2   第二次循环 改变指针指向  null&amp;lt;-1(prev)&amp;lt;-2(head) 3-&amp;gt;4-&amp;gt;null  prev = 1 head = 2 save = 3   往右平移指针prev,head  null&amp;lt;-1&amp;lt;-2(prev) 3(head)-&amp;gt;4-&amp;gt;null  prev = 2 head = 3 save = 3   第三次循环 改变指针指向  null&amp;lt;-1&amp;lt;-2(prev)&amp;lt;-3(head) 4-&amp;gt;null  prev = 2 head = 3 save = 4   往右平移指针prev,head  null&amp;lt;-1&amp;lt;-2&amp;lt;-3(prev) 4(head)-&amp;gt;null  prev = 3 head = 4 save = 4   第四次循环 改变指针指向  null&amp;lt;-1&amp;lt;-2&amp;lt;-3(prev)&amp;lt;-4(head) null  prev = 3 head = 4 save = null   往右平移指针prev,head  null&amp;lt;-1&amp;lt;-2&amp;lt;-3&amp;lt;-4(prev) null(head)  prev = 4 head = null save = null   循环结束条件 根据第四次循环的结果，可以看到循环的终止条件就是head=null</description>
    </item>
    
    <item>
      <title>大数相加</title>
      <link>https://mannuan.github.io/post/20190824230046/</link>
      <pubDate>Sat, 24 Aug 2019 23:00:46 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190824230046/</guid>
      <description> 大数相加 javascript实现 function sumBigNumber(a, b) { var res = &amp;#39;&amp;#39;, temp = 0; a = a.split(&amp;#39;&amp;#39;); b = b.split(&amp;#39;&amp;#39;); while (a.length || b.length || temp) { temp += ~~a.pop() + ~~b.pop(); res = (temp % 10) + res; temp = temp &amp;gt; 9; } return res.replace(/^0+/, &amp;#39;&amp;#39;); } </description>
    </item>
    
    <item>
      <title>快速排序</title>
      <link>https://mannuan.github.io/post/20190824224818/</link>
      <pubDate>Sat, 24 Aug 2019 22:48:19 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190824224818/</guid>
      <description>快速排序 过程描述 对数组的每一个部分，分别根据base进行元素的划分
在元素的划分过程中，需要借助两个指针i,j; 分别向后和向前移动
javascript实现 function partion(arr, left, right){ let base = arr[left]; let i = left; let j = right; while(i&amp;lt;j){ while(arr[j]&amp;gt;=base&amp;amp;&amp;amp;i&amp;lt;j){ j--; } while(arr[i]&amp;lt;=base&amp;amp;&amp;amp;i&amp;lt;j){ i++; } let tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } arr[left] = arr[i]; arr[i] = base; return i; } function quickSort(arr, left, right){ if(left &amp;lt; right){ let m = partion(arr, left, right); quickSort(arr, left, m); quickSort(arr, m+1,right); } }  c++实现 # include&amp;lt;iostream&amp;gt;  # include&amp;lt;cstring&amp;gt;  # include&amp;lt;cstdlib&amp;gt;  using namespace std; int partion(int arr[], int left, int right){ int base = arr[left]; int i = left; int j = right; while(i&amp;lt;j){ while(arr[j]&amp;gt;=base&amp;amp;&amp;amp;i&amp;lt;j){ j--; } while(arr[i]&amp;lt;=base&amp;amp;&amp;amp;i&amp;lt;j){ i++; } int tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } arr[left] = arr[i]; arr[i] = base; return i; } void quickSort(int arr[], int left, int right){ if(left &amp;lt; right){ int m = partion(arr, left, right); quickSort(arr, left, m); quickSort(arr, m+1, right); } } int main(){ const int n = 10; int arr[n] = {0}; for(int i=0;i&amp;lt;n;i++){ arr[i] = rand() % n + 0; } for(int i=0;i&amp;lt;n;i++){ cout&amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } cout&amp;lt;&amp;lt;endl; quickSort(arr, 0, n); for(int i=0;i&amp;lt;n;i++){ cout&amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } cout&amp;lt;&amp;lt;endl; return 0; }  python实现 import random arr = [random.</description>
    </item>
    
    <item>
      <title>冒泡排序、选择排序和插入排序的比较</title>
      <link>https://mannuan.github.io/post/20190603215721/</link>
      <pubDate>Mon, 03 Jun 2019 21:57:21 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190603215721/</guid>
      <description> 冒泡排序 算法流程 假设存在一个长度为N的数组，按照从左至右的顺序升序排列。首先，通过N-1次数
javascript代码 function bubbleSort(){ var arr = arguments[0]; for(var end=arr.length-1; end&amp;gt;0; end--){ for(var i=0; i&amp;lt;end; i++){ if(arr[i] &amp;gt; arr[end]){ var tmp = arr[i]; arr[i] = arr[end]; arr[end] = tmp; } } } } function randomNum(max=100, start=33){ return Math.floor(Math.random() * max + start); } var arr = []; var length = randomNum(30, 1); for(var i=0; i&amp;lt;length; i++){ // 创建随机数组  arr.push(randomNum()); } console.log(arr); bubbleSort(arr); console.log(arr);  选择排序 </description>
    </item>
    
  </channel>
</rss>