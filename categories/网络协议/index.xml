<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网络协议 on mannuan</title>
    <link>https://mannuan.github.io/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</link>
    <description>Recent content in 网络协议 on mannuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 23 Aug 2019 21:52:48 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GET和POST比较</title>
      <link>https://mannuan.github.io/post/20190823215248/</link>
      <pubDate>Fri, 23 Aug 2019 21:52:48 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823215248/</guid>
      <description>GET和POST比较 作用 GET 用于获取资源，而 POST 用于传输实体主体。
参数 GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中。不能因为 POST 参数存储在实体主体中就认为它的安全性更高，因为照样可以通过一些抓包工具（Fiddler）查看。
因为 URL 只支持 ASCII 码，因此 GET 的参数中如果存在中文等字符就需要先进行编码。例如 中文 会转换为 %E4%B8%AD%E6%96%87，而空格会转换为 %20。POST 参数支持标准字符集。
GET /test/demo_form.asp?name1=value1&amp;amp;name2=value2 HTTP/1.1  POST /test/demo_form.asp HTTP/1.1 Host: w3schools.com name1=value1&amp;amp;name2=value2  安全 安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。
GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。
安全的方法除了 GET 之外还有：HEAD、OPTIONS。
不安全的方法除了 POST 之外还有 PUT、DELETE。
幂等性 幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。
所有的安全方法也都是幂等的。
在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。</description>
    </item>
    
    <item>
      <title>HTTP/1.1新特性</title>
      <link>https://mannuan.github.io/post/20190823214854/</link>
      <pubDate>Fri, 23 Aug 2019 21:48:54 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823214854/</guid>
      <description> HTTP/1.1新特性  默认是长连接 支持流水线 支持同时打开多个 TCP 连接 支持虚拟主机 新增状态码 100 支持分块传输编码 新增缓存处理指令 max-age  </description>
    </item>
    
    <item>
      <title>HTTP/2.0</title>
      <link>https://mannuan.github.io/post/20190823213853/</link>
      <pubDate>Fri, 23 Aug 2019 21:38:53 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823213853/</guid>
      <description>HTTP/2.0 HTTP/1.x缺陷 HTTP/1.x 实现简单是以牺牲性能为代价的：
 客户端需要使用多个连接才能实现并发和缩短延迟； 不会压缩请求和响应首部，从而导致不必要的网络流量； 不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。  二进制分帧层 HTTP/2.0 将报文分成 HEADERS 帧和 DATA 帧，它们都是二进制格式的。 在通信过程中，只会有一个 TCP 连接存在，它承载了任意数量的双向数据流（Stream）。
 一个数据流（Stream）都有一个唯一标识符和可选的优先级信息，用于承载双向信息。 消息（Message）是与逻辑请求或响应对应的完整的一系列帧。 帧（Frame）是最小的通信单位，来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。  服务端推送 HTTP/2.0 在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 page.html 页面，服务端就把 script.js 和 style.css 等与之相关的资源一起发给客户端。
首部压缩 HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。
HTTP/2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输。
不仅如此，HTTP/2.0 也使用 Huffman 编码对首部字段进行压缩。</description>
    </item>
    
    <item>
      <title>HTTPS</title>
      <link>https://mannuan.github.io/post/20190823212538/</link>
      <pubDate>Fri, 23 Aug 2019 21:25:38 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823212538/</guid>
      <description>HTTPS HTTP 有以下安全性问题： + 使用明文进行通信，内容可能会被窃听； + 不验证通信方的身份，通信方的身份有可能遭遇伪装； + 无法证明报文的完整性，报文有可能遭篡改。
HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了隧道进行通信。
通过使用 SSL，HTTPS 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。 加密 对称密钥加密 对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。
+ 优点：运算速度快； + 缺点：无法安全地将密钥传输给通信方。
非对称密钥加密 非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。
公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。
非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确。
 优点：可以更安全地将公开密钥传输给通信发送方； 缺点：运算速度慢  HTTPS采用的加密方式 HTTPS 采用混合的加密机制，使用非对称密钥加密用于传输对称密钥来保证传输过程的安全性，之后使用对称密钥加密进行通信来保证通信过程的效率。（下图中的 Session Key 就是对称密钥）
认证 通过使用 证书 来对通信方进行认证。
数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。
服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。
进行 HTTPS 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过，就可以开始通信了。
完整性保护 SSL 提供报文摘要功能来进行完整性保护。
HTTP 也提供了 MD5 报文摘要功能，但不是安全的。例如报文内容被篡改之后，同时重新计算 MD5 的值，通信接收方是无法意识到发生了篡改。</description>
    </item>
    
    <item>
      <title>具体应用</title>
      <link>https://mannuan.github.io/post/20190823191245/</link>
      <pubDate>Fri, 23 Aug 2019 19:12:46 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823191245/</guid>
      <description>参考链接
具体应用 连接管理 短连接与长连接 当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问的 HTML 页面资源，还会请求图片资源。如果每进行一次 HTTP 通信就要新建一个 TCP 连接，那么开销会很大。
长连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。
 从 HTTP/1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 Connection : close； 在 HTTP/1.1 之前默认是短连接的，如果需要使用长连接，则使用 Connection : Keep-Alive。  流水线 默认情况下，HTTP 请求是按顺序发出的，下一个请求只有在当前请求收到响应之后才会被发出。由于受到网络延迟和带宽的限制，在下一个请求被发送到服务器之前，可能需要等待很长时间。
流水线是在同一条长连接上连续发出请求，而不用等待响应返回，这样可以减少延迟。
Cookie HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。
Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一浏览器。由于之后每次请求都会需要携带 Cookie 数据，因此会带来额外的性能开销（尤其是在移动环境下）。
Cookie 曾一度用于客户端数据的存储，因为当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API（本地存储和会话存储）或 IndexedDB。
用途  会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息） 个性化设置（如用户自定义设置、主题等） 浏览器行为跟踪（如跟踪分析用户行为等）  创建过程 服务器发送的响应报文包含 Set-Cookie 首部字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。</description>
    </item>
    
    <item>
      <title>HTTP首部</title>
      <link>https://mannuan.github.io/post/20190823191041/</link>
      <pubDate>Fri, 23 Aug 2019 19:10:41 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823191041/</guid>
      <description> HTTP首部 有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。
 各种首部字段及其含义如下（不需要全记，仅供查阅）：
 通用首部字段    首部字段名 说明     Cache-Control 控制缓存的行为   Connection 控制不再转发给代理的首部字段、管理持久连接   Date 创建报文的日期时间   Pragma 报文指令   Trailer 报文末端的首部一览   Transfer-Encoding 指定报文主体的传输编码方式   Upgrade 升级为其他协议   Via 代理服务器的相关信息   Warning 错误通知    请求首部字段    首部字段名 说明     Accept 用户代理可处理的媒体类型   Accept-Charset 优先的字符集   Accept-Encoding 优先的内容编码   Accept-Language 优先的语言（自然语言）   Authorization Web 认证信息   Expect 期待服务器的特定行为   From 用户的电子邮箱地址   Host 请求资源所在服务器   If-Match 比较实体标记（ETag）   If-Modified-Since 比较资源的更新时间   If-None-Match 比较实体标记（与 If-Match 相反）   If-Range 资源未更新时发送实体 Byte 的范围请求   If-Unmodified-Since 比较资源的更新时间（与 If-Modified-Since 相反）   Max-Forwards 最大传输逐跳数   Proxy-Authorization 代理服务器要求客户端的认证信息   Range 实体的字节范围请求   Referer 对请求中 URI 的原始获取方   TE 传输编码的优先级   User-Agent HTTP 客户端程序的信息    响应首部字段    首部字段名 说明     Accept-Ranges 是否接受字节范围请求   Age 推算资源创建经过时间   ETag 资源的匹配信息   Location 令客户端重定向至指定 URI   Proxy-Authenticate 代理服务器对客户端的认证信息   Retry-After 对再次发起请求的时机要求   Server HTTP 服务器的安装信息   Vary 代理服务器缓存的管理信息   WWW-Authenticate 服务器对客户端的认证信息    实体首部字段    首部字段名 说明     Allow 资源可支持的 HTTP 方法   Content-Encoding 实体主体适用的编码方式   Content-Language 实体主体的自然语言   Content-Length 实体主体的大小   Content-Location 替代对应资源的 URI   Content-MD5 实体主体的报文摘要   Content-Range 实体主体的位置范围   Content-Type 实体主体的媒体类型   Expires 实体主体过期的日期时间   Last-Modified 资源的最后修改日期时间    </description>
    </item>
    
    <item>
      <title>HTTP方法</title>
      <link>https://mannuan.github.io/post/20190823185325/</link>
      <pubDate>Fri, 23 Aug 2019 18:53:26 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823185325/</guid>
      <description>HTTP方法  客户端发送的 请求报文 第一行为请求行，包含了方法字段。
GET 获取网络资源
当前网络请求中，绝大部分使用的是 GET 方法。
HEAD 获取报文首部
和 GET 方法类似，但是不返回报文实体主体部分。 主要用于确认 URL 的有效性以及资源更新的日期时间等。
POST 向服务器发送数据
POST 主要用来传输数据，而 GET 主要用来获取资源。
PUT 上传文件
由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。
 PUT /new.html HTTP/1.1 Host: example.com Content-type: text/html Content-length: 16 &amp;lt;p&amp;gt;New File&amp;lt;/p&amp;gt;  PATCH 对资源进行部分修改
PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。
PATCH /file.txt HTTP/1.1 Host: www.example.com Content-Type: application/example If-Match: &amp;quot;e0023aa4e&amp;quot; Content-Length: 100 [description of changes]  DELETE 删除文件
与 PUT 功能相反，并且同样不带验证机制。 DELETE /file.html HTTP/1.1
OPTIONS 查询支持的方法</description>
    </item>
    
    <item>
      <title>HTTP状态码</title>
      <link>https://mannuan.github.io/post/20190823173028/</link>
      <pubDate>Fri, 23 Aug 2019 17:30:28 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823173028/</guid>
      <description>HTTP状态码 服务器返回的 响应报文 中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。
   状态码 类别 含义     1XX Informational（信息性状态码） 接收的请求正在处理   2XX Success（成功状态码） 请求正常处理完毕   3XX Redirection（重定向状态码） 需要进行附加操作以完成请求   4XX Client Error（客户端错误状态码） 服务器无法处理请求   5XX Server Error（服务器错误状态码） 服务器处理请求出错   
1XX信息 100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。
2XX成功  200 OK 204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。 206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。  3XX重定向  301 Moved Permanently ：永久性重定向 302 Found ：临时性重定向 303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</description>
    </item>
    
    <item>
      <title>Socket</title>
      <link>https://mannuan.github.io/post/20190823171122/</link>
      <pubDate>Fri, 23 Aug 2019 17:11:22 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823171122/</guid>
      <description> Socket </description>
    </item>
    
    <item>
      <title>基础概念</title>
      <link>https://mannuan.github.io/post/20190823170451/</link>
      <pubDate>Fri, 23 Aug 2019 17:04:51 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823170451/</guid>
      <description> 基础概念 URI URI 包含 URL 和 URN。 请求和响应报文 请求报文 响应报文 </description>
    </item>
    
    <item>
      <title>概述</title>
      <link>https://mannuan.github.io/post/20190822105913/</link>
      <pubDate>Thu, 22 Aug 2019 10:59:14 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190822105913/</guid>
      <description> 概述 网络的网络 网络把主机连接起来，而互联网是把多种不同的网络连接起来，因此互联网是网络的网络。
ISP </description>
    </item>
    
    <item>
      <title>UDP和TCP协议</title>
      <link>https://mannuan.github.io/post/20190708141834/</link>
      <pubDate>Mon, 08 Jul 2019 14:18:34 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190708141834/</guid>
      <description>UDP和TCP协议 1、UDP 1.1、数据包格式   源端口号(16位) 目的端口号(16位)    UDP长度(16位) UDP校验和(16位)   数据    1.2、特点  沟通简单。不需要一肚子花花肠子(大量的数据结构、处理逻辑、包头字段)。前提是它相信网络世界是美好的，秉承性善论，相信网络通路默认就是很容易送达的，不容易被丢弃的。 轻信他人。它不会建立连接，虽然有端口号，但是监听在这个地方，谁都可以传给他数据，他也可以传给任何人数据，甚至可以同时传给多个人数据。 愣头青。做事不懂权变。不知道什么时候该坚持，什么时候该退让。它不会根据网络的情况进行发包的拥塞控制，无论网络丢包丢成啥样了，它该怎么发还怎么发。  1.3、使用场景  需要资源少，在网络情况比较好的内网，或者对于丢包不敏感的应用。这很好理解，就像如果你是领导，你会让你们组刚毕业的小朋友去做一些没有那么难的项目，打一些没有那么难的客户，或者做一些失败了也能忍受的实验性项目。 不需要一对一沟通，建立连接，而是可以广播的应用。咱们小时候人都很简单，大家在班级里面，谁成绩好，谁写作好，应该表扬谁惩罚谁，谁得几个小红花都是当着全班的面讲的，公平公正公开。长大了人心复杂了，薪水、奖金要背靠背，和员工一对一沟通。 需要处理速度快，时延低，可以容忍少数丢包，但是要求即便网络拥塞，也毫不退缩，一往无前的时候。记得曾国藩建立湘军的时候，专门招出生牛犊不怕虎的新兵，而不用那些“老油条”的八旗 兵，就是因为八旗兵经历的事情多，遇到敌军不敢舍死忘生。  TCP三次握手 握手过程   SYN(Synchronize sequence numbers): TCP首部中的同步序号标志 ACK(Acknowledgement): 确认字符      时间段 客户端 服务端   活动 状态 活动 状态       CLOSED  CLOSED     CLOSED  LISTEN    &amp;rarr;   第一次握手 主动发起连接SYN SYN-SENT 收到发起的连接 SYN-RCVD   &amp;larr;  第二次握手 收到SYN和ACK SYN_SENT 返回SYN并ACK客户端的SYN SYN_RCVD    &amp;rarr;   第三次握手 发送ACK的ACK ESTABLISHED 收到客户端的ACK ESTABLISHED    为什么不是两次握手？  A为客户端，B为服务端</description>
    </item>
    
    <item>
      <title>ICMP协议是什么？ICMP协议的作用是什么？</title>
      <link>https://mannuan.github.io/post/20190707153102/</link>
      <pubDate>Sun, 07 Jul 2019 15:31:02 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190707153102/</guid>
      <description>1、ICMP的定义 全称Internet Control Message Protocol，就是互联网控制报文协议。
 这里的关键词是”控制“，下面我将介绍它是如何控制的
 2、ICMP的由来 由于复杂的网络环境，数据包在网络中传输常常会发生各种问题。当遇到问题时，我们不想让数据包“死得不明不白”。为了知道产生问题的原因，我们需要构造一种新的数据包来传回消息。
 其实，上面提到这种情况和我们在电视上看到的古代作战很像，在开始作战之前，主帅都要派出“侦察兵”来检查敌方的兵力状况，以调整作战策略。
 3、ICMP的报文 ICMP它是一个3层网络协议，工作在网络层。由于数据包的传输是需要源地址和目的地址，所以被封装在IP中。它的数据包结构非常简单，因为一个“侦察兵”要“轻装上阵”，不能携带太多的包袱。
3.1、报文结构  目前类型字段有8位，可以有256种类型，但是我们实际常用的只有3种，分别是0,3,8,具体会在下面提到
 3.2、报文分类  分为两类：查询和差错报文
 3.2.1、查询报文 分为两类：回显请求和回显应答报文。
 在这里代码字段，我们只用到了0，还有255个代码没有用，具体会在下面讲到
 3.2.1.1、 回显请求 类型字段为8，代码字段为0
3.2.1.2、 回显应答 类型字段为0，代码字段为0
3.2.1.3、 Ping应用 ping发的包就符合ICMP协议的格式，只不过它在自己的数据字段增加了自己的格式。比原生的ICMP多了两个字段，一个是标识符，用来标识ping发出去的“侦察兵”的具体的任务是什么，比如“查找水源”；另一个是序号，用来给每个侦察兵编号，比如，“1号查找水源的侦察兵”。在数据字段中，ping还会存放发生请求的时间，用来计算往返的时间。
下图的ping的过程示意图 3.2.2、 差错报文 分为4种：终点不可达，源站抑制，时间超时和路由重定向
3.2.2.1、 终点不可达 网络不可达(代码0)，主机不可达(代码1)，协议不可达(代码2)，端口不可达(代码3)，需要进行分片但设置了不分片位代码(代码4)
3.2.2.2、 源站抑制 就是让源站放慢发送速度。小兵:报告主公，您粮草送的太多了吃不完。
3.2.2.3、 时间超时 就是超过网络包的生存时间还是没到。小兵:报告主公，送粮草的人，自己把粮草吃完了，还没找到地方，已经饿死啦。
3.2.2.4、 路由重定向 就是让下次发给另一个路由器。小兵:报告主公，上次送粮草的人本来只要走一站地铁，非得从五环绕，下次别这样了啊。
差错报文的结构相对复杂一些。除了前面还是 IP，ICMP 的前 8 字节不变，后面则跟上出错的那个 IP 包 的IP 头和IP 正文的前 8 个字节。
 而且这类侦查兵特别恪尽职守，不但自己返回来报信，还把一部分遗物也带回来。
* 侦察兵:报告主公，张将军已经战死沙场，这是张将军的印信和佩剑。</description>
    </item>
    
  </channel>
</rss>