<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>华为 on mannuan</title>
    <link>https://mannuan.github.io/tags/%E5%8D%8E%E4%B8%BA/</link>
    <description>Recent content in 华为 on mannuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 21 Aug 2019 21:23:36 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/tags/%E5%8D%8E%E4%B8%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>报文转义</title>
      <link>https://mannuan.github.io/post/20190821212336/</link>
      <pubDate>Wed, 21 Aug 2019 21:23:36 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190821212336/</guid>
      <description>题目描述 说明: 实现报文转义功能, 报文中如里出现0x0A，转义成为2个字节0x12 0x34, 如果出现0x0B，转义成为2个字节0xAB OXCD。 其他报文字节保持不变
输入描述：  输入的报文为16进制，输入报文长度不超过127，输入的报文第一个字节为报文长度，第一个字节（报文长度）算正式报文的一部分，但是不参与转义 输入的报文每个字节用空格隔开
输出描述： 输出为转义后的报文，转义后的报文长度也不超过255，输出到的报文第一个字节算正式报文的一部分，为转义后的报文长度
 输出的报文内容都为大写的16进制，输出报文为16进制，前不带0x前缀
 输出的报文每个字节用空格隔开
  示例1 输入 8 1 2 3 4 5 6 A
输出 9 1 2 3 4 5 6 12 34
说明 输入报文 8 1 2 3 4 5 6 A 解释：8 为报文长度 输出报文 9 1 2 3 4 5 6 12 34 解释: 9为报文长度， 12 34为输入报文中A 转义后的报文
实现代码 # -*- coding: utf-8 -*- import sys line = sys.</description>
    </item>
    
    <item>
      <title>旋转字符串</title>
      <link>https://mannuan.github.io/post/20190810224801/</link>
      <pubDate>Sat, 10 Aug 2019 22:48:01 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190810224801/</guid>
      <description>题目描述 给字符串定义一个“旋转“的操作，比如字符串AbcD旋转一次变成bcDA。继续旋转则依次变成cDAb、DAbc、Abcd。 给定两个字符串“源和目标”请判断“源“在旋转一定次数后，是否可以包含“目标
输入描述 三组长度非空字符串，一共6行，奇数行为“源“字符串，偶数行为“目标”字符串
输出描述 每组字符串是否可以旋转包含。包含返回 1, 不包含返回 0
示例1  输入输出示例仅供调试，后台判题数据一般不包含示例
 输入 AABCD
CDAA
AABCD
ABCD
AABCD
CFS
输出 110
代码待验证
function getPrefix(pattern, prefix){ let i = 1; let len = 0; prefix[0] = 0; while(i&amp;lt;pattern.length){ if(pattern[i] == pattern[len]){ prefix[i++] = ++len; }else{ if(len&amp;gt;0){ len = prefix[len-1]; }else{ prefix[i++] = len; } } } } function kmpSearch(text, pattern){ let prefix = []; getPrefix(pattern, prefix); prefix.unshift(-1); prefix.pop(); let i = 0; let j = 0; while(i&amp;lt;text.</description>
    </item>
    
    <item>
      <title>强迫症卖家</title>
      <link>https://mannuan.github.io/post/20190810221953/</link>
      <pubDate>Sat, 10 Aug 2019 22:19:53 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190810221953/</guid>
      <description> 时间限制： C/C++语言 1秒；其他语言 2秒
内存限制： C/C++语言 32768K；其他语言 65536K 64bit IO Format %lld
题目描述 小明是个有强迫症的卖家，他手头有10000台设备，他想以他的幸运数D元（D是个浮点数）每台的价格批量卖一些出去，他不在乎能卖出去多少台，只在乎卖出去的每台均价最接近D元，而且他只收整数数额的钱。请你编程计算他应该每次卖出去的台数N，一共售价M。
输入描述 输入一个浮点数D(0 &amp;lt;D &amp;lt;10），精确到小数点后14位，表示小明钟情的价格。
输出描述 输出两个正整数M, N，以空格分割 如果有多种方案均价一样，输出台数最小的那个。
示例1  输入输出示例仅供调试，后台判题数据一般不包含示例
 输入 0.50000000000000
输出 1 2
示例2  输入输出示例仅供调试，后台判题数据一般不包含示例
 输入 3.14159265358979
输出 355 113
#coding=utf-8 import sys D = float(sys.stdin.readline().strip()) n, m = 1, 1 # 正负无穷 float(&amp;#34;inf&amp;#34;), float(&amp;#34;-inf&amp;#34;) diff = float(&amp;#39;inf&amp;#39;) while m &amp;lt; 100000 and n &amp;lt;= 10000: if abs(m/n-D) &amp;lt; diff: tmp_m, tmp_n = m, n diff = abs(m/n-D) if m/n-D &amp;gt; 0: n += 1 elif m/n-D &amp;lt;= 0: m += 1 print(tmp_m, tmp_n)</description>
    </item>
    
  </channel>
</rss>