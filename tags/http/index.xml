<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTTP on mannuan</title>
    <link>https://mannuan.github.io/tags/http/</link>
    <description>Recent content in HTTP on mannuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 23 Aug 2019 21:52:48 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/tags/http/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GET和POST比较</title>
      <link>https://mannuan.github.io/post/20190823215248/</link>
      <pubDate>Fri, 23 Aug 2019 21:52:48 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823215248/</guid>
      <description>GET和POST比较 作用 GET 用于获取资源，而 POST 用于传输实体主体。
参数 GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中。不能因为 POST 参数存储在实体主体中就认为它的安全性更高，因为照样可以通过一些抓包工具（Fiddler）查看。
因为 URL 只支持 ASCII 码，因此 GET 的参数中如果存在中文等字符就需要先进行编码。例如 中文 会转换为 %E4%B8%AD%E6%96%87，而空格会转换为 %20。POST 参数支持标准字符集。
GET /test/demo_form.asp?name1=value1&amp;amp;name2=value2 HTTP/1.1  POST /test/demo_form.asp HTTP/1.1 Host: w3schools.com name1=value1&amp;amp;name2=value2  安全 安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。
GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。
安全的方法除了 GET 之外还有：HEAD、OPTIONS。
不安全的方法除了 POST 之外还有 PUT、DELETE。
幂等性 幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。
所有的安全方法也都是幂等的。
在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。</description>
    </item>
    
    <item>
      <title>HTTP/1.1新特性</title>
      <link>https://mannuan.github.io/post/20190823214854/</link>
      <pubDate>Fri, 23 Aug 2019 21:48:54 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823214854/</guid>
      <description> HTTP/1.1新特性  默认是长连接 支持流水线 支持同时打开多个 TCP 连接 支持虚拟主机 新增状态码 100 支持分块传输编码 新增缓存处理指令 max-age  </description>
    </item>
    
    <item>
      <title>HTTP/2.0</title>
      <link>https://mannuan.github.io/post/20190823213853/</link>
      <pubDate>Fri, 23 Aug 2019 21:38:53 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823213853/</guid>
      <description>HTTP/2.0 HTTP/1.x缺陷 HTTP/1.x 实现简单是以牺牲性能为代价的：
 客户端需要使用多个连接才能实现并发和缩短延迟； 不会压缩请求和响应首部，从而导致不必要的网络流量； 不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。  二进制分帧层 HTTP/2.0 将报文分成 HEADERS 帧和 DATA 帧，它们都是二进制格式的。 在通信过程中，只会有一个 TCP 连接存在，它承载了任意数量的双向数据流（Stream）。
 一个数据流（Stream）都有一个唯一标识符和可选的优先级信息，用于承载双向信息。 消息（Message）是与逻辑请求或响应对应的完整的一系列帧。 帧（Frame）是最小的通信单位，来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。  服务端推送 HTTP/2.0 在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 page.html 页面，服务端就把 script.js 和 style.css 等与之相关的资源一起发给客户端。
首部压缩 HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。
HTTP/2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输。
不仅如此，HTTP/2.0 也使用 Huffman 编码对首部字段进行压缩。</description>
    </item>
    
    <item>
      <title>HTTPS</title>
      <link>https://mannuan.github.io/post/20190823212538/</link>
      <pubDate>Fri, 23 Aug 2019 21:25:38 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823212538/</guid>
      <description>HTTPS HTTP 有以下安全性问题： + 使用明文进行通信，内容可能会被窃听； + 不验证通信方的身份，通信方的身份有可能遭遇伪装； + 无法证明报文的完整性，报文有可能遭篡改。
HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了隧道进行通信。
通过使用 SSL，HTTPS 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。 加密 对称密钥加密 对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。
+ 优点：运算速度快； + 缺点：无法安全地将密钥传输给通信方。
非对称密钥加密 非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。
公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。
非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确。
 优点：可以更安全地将公开密钥传输给通信发送方； 缺点：运算速度慢  HTTPS采用的加密方式 HTTPS 采用混合的加密机制，使用非对称密钥加密用于传输对称密钥来保证传输过程的安全性，之后使用对称密钥加密进行通信来保证通信过程的效率。（下图中的 Session Key 就是对称密钥）
认证 通过使用 证书 来对通信方进行认证。
数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。
服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。
进行 HTTPS 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过，就可以开始通信了。
完整性保护 SSL 提供报文摘要功能来进行完整性保护。
HTTP 也提供了 MD5 报文摘要功能，但不是安全的。例如报文内容被篡改之后，同时重新计算 MD5 的值，通信接收方是无法意识到发生了篡改。</description>
    </item>
    
    <item>
      <title>具体应用</title>
      <link>https://mannuan.github.io/post/20190823191245/</link>
      <pubDate>Fri, 23 Aug 2019 19:12:46 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823191245/</guid>
      <description>参考链接
具体应用 连接管理 短连接与长连接 当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问的 HTML 页面资源，还会请求图片资源。如果每进行一次 HTTP 通信就要新建一个 TCP 连接，那么开销会很大。
长连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。
 从 HTTP/1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 Connection : close； 在 HTTP/1.1 之前默认是短连接的，如果需要使用长连接，则使用 Connection : Keep-Alive。  流水线 默认情况下，HTTP 请求是按顺序发出的，下一个请求只有在当前请求收到响应之后才会被发出。由于受到网络延迟和带宽的限制，在下一个请求被发送到服务器之前，可能需要等待很长时间。
流水线是在同一条长连接上连续发出请求，而不用等待响应返回，这样可以减少延迟。
Cookie HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。
Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一浏览器。由于之后每次请求都会需要携带 Cookie 数据，因此会带来额外的性能开销（尤其是在移动环境下）。
Cookie 曾一度用于客户端数据的存储，因为当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API（本地存储和会话存储）或 IndexedDB。
用途  会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息） 个性化设置（如用户自定义设置、主题等） 浏览器行为跟踪（如跟踪分析用户行为等）  创建过程 服务器发送的响应报文包含 Set-Cookie 首部字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。</description>
    </item>
    
    <item>
      <title>HTTP首部</title>
      <link>https://mannuan.github.io/post/20190823191041/</link>
      <pubDate>Fri, 23 Aug 2019 19:10:41 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823191041/</guid>
      <description> HTTP首部 有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。
 各种首部字段及其含义如下（不需要全记，仅供查阅）：
 通用首部字段    首部字段名 说明     Cache-Control 控制缓存的行为   Connection 控制不再转发给代理的首部字段、管理持久连接   Date 创建报文的日期时间   Pragma 报文指令   Trailer 报文末端的首部一览   Transfer-Encoding 指定报文主体的传输编码方式   Upgrade 升级为其他协议   Via 代理服务器的相关信息   Warning 错误通知    请求首部字段    首部字段名 说明     Accept 用户代理可处理的媒体类型   Accept-Charset 优先的字符集   Accept-Encoding 优先的内容编码   Accept-Language 优先的语言（自然语言）   Authorization Web 认证信息   Expect 期待服务器的特定行为   From 用户的电子邮箱地址   Host 请求资源所在服务器   If-Match 比较实体标记（ETag）   If-Modified-Since 比较资源的更新时间   If-None-Match 比较实体标记（与 If-Match 相反）   If-Range 资源未更新时发送实体 Byte 的范围请求   If-Unmodified-Since 比较资源的更新时间（与 If-Modified-Since 相反）   Max-Forwards 最大传输逐跳数   Proxy-Authorization 代理服务器要求客户端的认证信息   Range 实体的字节范围请求   Referer 对请求中 URI 的原始获取方   TE 传输编码的优先级   User-Agent HTTP 客户端程序的信息    响应首部字段    首部字段名 说明     Accept-Ranges 是否接受字节范围请求   Age 推算资源创建经过时间   ETag 资源的匹配信息   Location 令客户端重定向至指定 URI   Proxy-Authenticate 代理服务器对客户端的认证信息   Retry-After 对再次发起请求的时机要求   Server HTTP 服务器的安装信息   Vary 代理服务器缓存的管理信息   WWW-Authenticate 服务器对客户端的认证信息    实体首部字段    首部字段名 说明     Allow 资源可支持的 HTTP 方法   Content-Encoding 实体主体适用的编码方式   Content-Language 实体主体的自然语言   Content-Length 实体主体的大小   Content-Location 替代对应资源的 URI   Content-MD5 实体主体的报文摘要   Content-Range 实体主体的位置范围   Content-Type 实体主体的媒体类型   Expires 实体主体过期的日期时间   Last-Modified 资源的最后修改日期时间    </description>
    </item>
    
    <item>
      <title>HTTP方法</title>
      <link>https://mannuan.github.io/post/20190823185325/</link>
      <pubDate>Fri, 23 Aug 2019 18:53:26 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823185325/</guid>
      <description>HTTP方法  客户端发送的 请求报文 第一行为请求行，包含了方法字段。
GET 获取网络资源
当前网络请求中，绝大部分使用的是 GET 方法。
HEAD 获取报文首部
和 GET 方法类似，但是不返回报文实体主体部分。 主要用于确认 URL 的有效性以及资源更新的日期时间等。
POST 向服务器发送数据
POST 主要用来传输数据，而 GET 主要用来获取资源。
PUT 上传文件
由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。
 PUT /new.html HTTP/1.1 Host: example.com Content-type: text/html Content-length: 16 &amp;lt;p&amp;gt;New File&amp;lt;/p&amp;gt;  PATCH 对资源进行部分修改
PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。
PATCH /file.txt HTTP/1.1 Host: www.example.com Content-Type: application/example If-Match: &amp;quot;e0023aa4e&amp;quot; Content-Length: 100 [description of changes]  DELETE 删除文件
与 PUT 功能相反，并且同样不带验证机制。 DELETE /file.html HTTP/1.1
OPTIONS 查询支持的方法</description>
    </item>
    
    <item>
      <title>HTTP状态码</title>
      <link>https://mannuan.github.io/post/20190823173028/</link>
      <pubDate>Fri, 23 Aug 2019 17:30:28 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823173028/</guid>
      <description>HTTP状态码 服务器返回的 响应报文 中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。
   状态码 类别 含义     1XX Informational（信息性状态码） 接收的请求正在处理   2XX Success（成功状态码） 请求正常处理完毕   3XX Redirection（重定向状态码） 需要进行附加操作以完成请求   4XX Client Error（客户端错误状态码） 服务器无法处理请求   5XX Server Error（服务器错误状态码） 服务器处理请求出错   
1XX信息 100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。
2XX成功  200 OK 204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。 206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。  3XX重定向  301 Moved Permanently ：永久性重定向 302 Found ：临时性重定向 303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</description>
    </item>
    
    <item>
      <title>基础概念</title>
      <link>https://mannuan.github.io/post/20190823170451/</link>
      <pubDate>Fri, 23 Aug 2019 17:04:51 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823170451/</guid>
      <description> 基础概念 URI URI 包含 URL 和 URN。 请求和响应报文 请求报文 响应报文 </description>
    </item>
    
    <item>
      <title>从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)</title>
      <link>https://mannuan.github.io/post/20190807110958/</link>
      <pubDate>Wed, 07 Aug 2019 11:09:59 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190807110958/</guid>
      <description>在浏览器地址栏输入URL 浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤  如果资源未缓存，发起新请求 如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。 检验新鲜通常有两个HTTP头进行控制Expires和Cache-Control：  HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期 HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间   浏览器解析URL获取协议，主机，端口，path 浏览器组装一个HTTP（GET）请求报文 浏览器获取主机ip地址，过程如下：  浏览器缓存 本机缓存 hosts文件 路由器缓存 ISP DNS缓存 DNS递归查询（可能存在负载均衡导致每次IP不一样）  打开一个socket与目标IP地址，端口建立TCP链接，三次握手如下：  客户端发送一个TCP的SYN=1，Seq=X的包到服务器端口 服务器发回SYN=1， ACK=X+1， Seq=Y的响应包 客户端发送ACK=Y+1， Seq=Z  TCP链接建立后发送HTTP请求 服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序 服务器检查HTTP请求头是否包含缓存验证信息如果验证缓存新鲜，返回304等对应状态码 处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作 服务器将响应报文通过TCP连接发送回浏览器 浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下：  主动方发送Fin=1， Ack=Z， Seq= X报文 被动方发送ACK=X+1， Seq=Z报文 被动方发送Fin=1， ACK=X， Seq=Y报文 主动方发送ACK=Y， Seq=X报文  浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同 如果资源可缓存，进行缓存 对响应进行解码（例如gzip压缩） 根据资源类型决定如何处理（假设资源为HTML文档） 解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严格的先后顺序，以下分别解释 构建DOM树：  Tokenizing：根据HTML规范将字符流解析为标记 Lexing：词法分析将标记转换为对象并定义属性和规则 DOM construction：根据HTML标记关系将对象组成DOM树  解析过程中遇到图片、样式表、js文件，启动下载 构建CSSOM树：  Tokenizing：字符流转换为标记流 Node：根据标记创建节点 CSSOM：节点创建CSSOM树  根据DOM树和CSSOM树构建渲染树:  从DOM树的根节点遍历所有可见节点，不可见节点包括：1）script,meta这样本身不可见的标签。2)被css隐藏的节点，如display: none 对每一个可见节点，找到恰当的CSSOM规则并应用 发布可视节点的内容和计算样式  js解析如下：  浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.</description>
    </item>
    
  </channel>
</rss>