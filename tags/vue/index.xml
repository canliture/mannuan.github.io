<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on mannuan</title>
    <link>https://mannuan.github.io/tags/vue/</link>
    <description>Recent content in vue on mannuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 23 Aug 2019 22:04:35 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>生命周期</title>
      <link>https://mannuan.github.io/post/20190823220435/</link>
      <pubDate>Fri, 23 Aug 2019 22:04:35 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190823220435/</guid>
      <description>生命周期 图解 实例创建过程 创建一个实例 new Vue()  init(初始化)  beforeCreate()
injections和reactivity created()
   在beforeCreate的时候不可以修改data数据，最早在created中添加一些行为
 在created完成以后，它会去判断instance(实例)中是否含有&amp;rdquo;el&amp;rdquo;option(选项)，如果没有的话，它会调用vm.$mount(el)这个方法，然后执行下一步；如果有的话，直接进入下一步。接下来他会判断是否含有“template”这个选项，如果有的话，他会把template解析成一个render function, 这是一个template编译的过程，结果是解析成功了render函数：
render (h) { return h(&amp;#39;div&amp;#39;, {}, this.text) }   render函数中的h就是vue里面的createElement方法，return返回一个createElement方法，其中要传3个参数，第一个参数就是创建的div标签；第二个参数传了一个对象，就是组件上的props对象，或者是事件之类的东西或是事件之类的东西。第三个参数就是div标签里面的内容，就是data中的text。
 使用render函数的结果和我们之前使用template解析出来的结果是一样的。render函数是发生在beforeMount和mounted之间的。也就是说在beforeMount的时候，$el还是我们之前写的html中的节点，然后到mounted的时候，它就把渲染出来的内容挂载到了DOM节点上。
在使用.vue文件开发的过程中，我们写的template模板，在经过了vue-loader的处理之后，就变成了render function, 最终放到了vue-loader解析过的文件里面。这样的好处就是：我们在在页面上执行vue代码的时候，效率高。
beforeMount在有了render function的时候才会执行，当执行完render function之后，就会调用mounted这个钩子，在mounted挂载完毕以后，这个实力算是初步创建好了。
后面的钩子函数都是需要外部的触发才会执行。比如数据的变化，会调用beforeUpdate,然后进过Virtual DOM，最后updated更新完毕。当组件</description>
    </item>
    
    <item>
      <title>vue开发环境和生产环境自动切换baseUrl</title>
      <link>https://mannuan.github.io/post/20190814142003/</link>
      <pubDate>Wed, 14 Aug 2019 14:20:03 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190814142003/</guid>
      <description>新建一个vue.config.js文件，填写下面的代码
const devBaseUrl = &amp;#34;/&amp;#34;; const proBaseUrl = &amp;#34;/knowledge-summary/frontend/dist/&amp;#34;; let baseUrl; process.env.NODE_ENV === &amp;#34;development&amp;#34; ? (baseUrl = devBaseUrl) : (baseUrl = proBaseUrl); module.exports = { baseUrl: baseUrl }; </description>
    </item>
    
    <item>
      <title>vue从入门到精通</title>
      <link>https://mannuan.github.io/post/20190808140332/</link>
      <pubDate>Thu, 08 Aug 2019 14:03:32 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190808140332/</guid>
      <description>创建项目 安装vue-cli3.x cnpm install -g @vue/cli 创建项目 vue create xxx Please pick a preset: ? Please pick a preset: firstpractice (vue-router, vuex, dart-sass, eslint) default (babel, eslint) ❯ Manually select features  选择最后一项
Check the features needed for your project: ? Please pick a preset: Manually select features ? Check the features needed for your project: ◯ Babel ◯ TypeScript ◯ Progressive Web App (PWA) Support ◉ Router ◉ Vuex ◉ CSS Pre-processors ❯◉ Linter / Formatter ◯ Unit Testing ◯ E2E Testing  选择上面实心圆的几项</description>
    </item>
    
    <item>
      <title>智慧旅游</title>
      <link>https://mannuan.github.io/post/20190807092523/</link>
      <pubDate>Wed, 07 Aug 2019 09:25:23 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190807092523/</guid>
      <description> 前端项目架构  public/
 favicon.ico index.html  src/
 api/ assets/ base/ common/ components/ config/ directive/ filters/ mock/ router/ store/ styles/ utils/ views/ App.vue main.js permission.js  babel.config.js
 package-lock.json
 package.json
 vue.config.js
  </description>
    </item>
    
    <item>
      <title>vue要点总结</title>
      <link>https://mannuan.github.io/post/20190806194820/</link>
      <pubDate>Tue, 06 Aug 2019 19:48:20 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190806194820/</guid>
      <description> 参考资料  链接 链接  </description>
    </item>
    
    <item>
      <title>瀑布流的Vue实践</title>
      <link>https://mannuan.github.io/post/20190806164157/</link>
      <pubDate>Tue, 06 Aug 2019 16:41:57 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190806164157/</guid>
      <description>参考资料 链接</description>
    </item>
    
    <item>
      <title>vue学习笔记（第一部分）</title>
      <link>https://mannuan.github.io/post/20190712145655/</link>
      <pubDate>Fri, 12 Jul 2019 14:56:56 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190712145655/</guid>
      <description>Vue.js 第一部分 课程介绍 前面5个部分：学习Vue的基本的语法和概念；打包工具Webpack，Gulp 后面5个部分：以项目驱动教学
什么是Vue.js  Vue.js是目前最火的一个框架，React是最流行的一个框架（React除了开发网站，还可以开发手机App） Vue.js是前端的主流框架之一，和Angular.js、React.js一起，并称为前端三大主流框架! Vue.js是一套构建用户界面的框架，只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发） 前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；  为什么要学习流行的框架  企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；
 企业中，使用框架，能够提高开发的效率；  提高开发效率的发展历程：原生JS-&amp;gt;Jquery之类的类库-&amp;gt;前端模板引擎-&amp;gt;和Angular.js/ Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念[通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了]）
 在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以有更多的时间去关注业务逻辑；
 增强自己就业时候的竞争力
 人无我有，人有我优   框架和库的区别  框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。
 node中的express  库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其他库实现需求。
 1. 从Jquery切换到Zepto 2. 从EJS切换到art-template   Node（后端）中的MVC与前端中的MVVM之间的区别  MVC是后端的分层开发概念；
 MVVM是前端视图层的概念，主要关注于视图层分离，也就是说：MVVM把前端的视图层，分为了三部分Model，View，VM ViewModel
 为什么有了MVC还要有MVVM
  
Vue.js 基本代码和MVVM之间的对应关系 Vue之 基本的代码结构和插值表达式、v-clock Vue基本的代码结构和插值表达式
Vue指令之 v-text和v-html Vue指令之 v-bind的三种用法  直接使用指令v-bind 使用简化指令: 在绑定的时候，拼接绑定内容：:title=&amp;quot;btnTitle + &#39;，这是追加的内容&#39;&amp;quot;  Vue指令之v-on和跑马灯效果 v-clock，v-text, v-html, v-bind, v-on</description>
    </item>
    
    <item>
      <title>关于Ajax的jQuery、Vue.js、原生js的各个版本的实现对比</title>
      <link>https://mannuan.github.io/post/20190628203826/</link>
      <pubDate>Fri, 28 Jun 2019 20:38:26 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190628203826/</guid>
      <description>目录
前言
1、原生js实现
2、原生js实现——Promise版本
3、jQuery实现
4、Vue.js实现
总结
前言  下面对于各个版本的Ajax代码，想要实际测试它们，可以把它命名为server2.html，然后放在当前目录views目录下面。具体的教程可以看测试Ajax的Nodejs服务端代码
 1、原生js实现 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;原生js版本&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div&amp;gt;&amp;lt;button&amp;gt;点击我发送get请求&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;button&amp;gt;点击我发送post请求&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;script&amp;gt; document.getElementsByTagName(&amp;#39;button&amp;#39;)[0].addEventListener(&amp;#39;click&amp;#39;, function () { ajax(&amp;#39;get&amp;#39;, &amp;#39;http://127.0.0.1:3000/get&amp;#39;, function (response) { alert(JSON.parse(response)[&amp;#39;message&amp;#39;]); }); }); document.getElementsByTagName(&amp;#39;button&amp;#39;)[1].addEventListener(&amp;#39;click&amp;#39;, function () { ajax(&amp;#39;post&amp;#39;, &amp;#39;http://127.0.0.1:3000/post&amp;#39;, function (response) { alert(JSON.parse(response)[&amp;#39;message&amp;#39;]); }, JSON.stringify({ name: &amp;#34;post测试&amp;#34; })); }); function ajax(method, url, callback, data, async) { data = data || null; async = async || true; var xhr = new window.</description>
    </item>
    
    <item>
      <title>vue常见错误汇总</title>
      <link>https://mannuan.github.io/post/20190622103331/</link>
      <pubDate>Sat, 22 Jun 2019 10:33:31 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190622103331/</guid>
      <description> new Vue(), V要大写 .vue文件中的&amp;lt;template&amp;gt;&amp;lt;/template&amp;gt;中不可以出现空行 vue模板中的el指向的是id，所以为了标识id，在前面要加上&amp;rdquo;#&amp;rdquo;  </description>
    </item>
    
  </channel>
</rss>