<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web service规范 on mannuan</title>
    <link>https://mannuan.github.io/tags/web-service%E8%A7%84%E8%8C%83/</link>
    <description>Recent content in web service规范 on mannuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 07 Jul 2019 21:49:14 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/tags/web-service%E8%A7%84%E8%8C%83/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java规范中和与Web Service相关的规范有哪些？</title>
      <link>https://mannuan.github.io/post/20190707214914/</link>
      <pubDate>Sun, 07 Jul 2019 21:49:14 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190707214914/</guid>
      <description> JAX-WS(JSR 224)：这个规范是早期的基于SOAP的Web Service规范JAX-RPC的替代版本，它并不提供向下兼容性，因为RPC样式的WSDL以及相关的API已经在Java EE5中被移除了。WS-MetaData是JAX-WS的依赖规范，提供了基于注解配置Web Service和SOAP消息的相关API。 JAXM(JSR 67)：定义了发送和接收消息所需的API,相当于Web Service的服务器端。 JAX-RS(JSR 311 &amp;amp; JSR 339 &amp;amp; JSR 370)：是Java针对REST（Representation State Transfer）架构风格制定的一套Web Service规范。REST是一种软件架构模式，是一种风格，它不像SOAP那样本身承载着一种消息协议， (两种风格的Web Service均采用了HTTP做传输协议，因为HTTP协议能穿越防火墙，Java的远程方法调用（RMI）等是重量级协议，通常不能穿越防火墙），因此可以将REST视为基于HTTP协议的软件架构。REST中最重要的两个概念是资源定位和资源操作，而HTTP协议恰好完整的提供了这两个点。HTTP协议中的URI可以完成资源定位，而GET、POST、OPTION、DELETE方法可以完成资源操作。因此REST完全依赖HTTP协议就可以完成Web Service，而不像SOAP协议那样只利用了HTTP的传输特性，定位和操作都是由SOAP协议自身完成的，也正是由于SOAP消息的存在使得基于SOAP的Web Service显得笨重而逐渐被淘汰。  </description>
    </item>
    
  </channel>
</rss>