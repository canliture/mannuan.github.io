<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on mannuan</title>
    <link>https://mannuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on mannuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 27 Aug 2019 15:26:35 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>链表</title>
      <link>https://mannuan.github.io/post/20190827152635/</link>
      <pubDate>Tue, 27 Aug 2019 15:26:35 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190827152635/</guid>
      <description>链表 定义 本质是线性表</description>
    </item>
    
    <item>
      <title>反转链表</title>
      <link>https://mannuan.github.io/post/20190824230403/</link>
      <pubDate>Sat, 24 Aug 2019 23:04:03 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190824230403/</guid>
      <description>反转链表 参考视频地址 视频地址
非递归实现 过程描述 需要两个指针prev, head在链表中进行移动；另外还需要一个指针save,用来保存head节点的下一个节点
举例说明 初始化的时候  prev 1(head)-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;null  prev = null head = 1 save = null   第一次循环 改变指针的指向  prev&amp;lt;-1(head) 2-&amp;gt;3-&amp;gt;4-&amp;gt;null  prev = null head = 1 save = 2   往右平移prev,head  null&amp;lt;-1(prev) 2(head)-&amp;gt;3-&amp;gt;4-&amp;gt;null  prev = 1 head = 2 save = 2   第二次循环 改变指针指向  null&amp;lt;-1(prev)&amp;lt;-2(head) 3-&amp;gt;4-&amp;gt;null  prev = 1 head = 2 save = 3   往右平移指针prev,head  null&amp;lt;-1&amp;lt;-2(prev) 3(head)-&amp;gt;4-&amp;gt;null  prev = 2 head = 3 save = 3   第三次循环 改变指针指向  null&amp;lt;-1&amp;lt;-2(prev)&amp;lt;-3(head) 4-&amp;gt;null  prev = 2 head = 3 save = 4   往右平移指针prev,head  null&amp;lt;-1&amp;lt;-2&amp;lt;-3(prev) 4(head)-&amp;gt;null  prev = 3 head = 4 save = 4   第四次循环 改变指针指向  null&amp;lt;-1&amp;lt;-2&amp;lt;-3(prev)&amp;lt;-4(head) null  prev = 3 head = 4 save = null   往右平移指针prev,head  null&amp;lt;-1&amp;lt;-2&amp;lt;-3&amp;lt;-4(prev) null(head)  prev = 4 head = null save = null   循环结束条件 根据第四次循环的结果，可以看到循环的终止条件就是head=null</description>
    </item>
    
    <item>
      <title>单链表</title>
      <link>https://mannuan.github.io/post/20190717084321/</link>
      <pubDate>Wed, 17 Jul 2019 08:43:21 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190717084321/</guid>
      <description>element next         /** * 1）单链表的插入、删除、查找操作； * 2）链表中存储的是int类型的数据； */ // 创建节点对象 class Node { constructor (element) { this.element = element this.next = null } } class LinkedList { constructor () { this.head = new Node(&amp;#39;head&amp;#39;) } // 根据value查找节点  findByValue (item) { let currentNode = this.head.next; while (currentNode !== null &amp;amp;&amp;amp; currentNode.element !== item) { currentNode = currentNode.next; } console.log(currentNode); return currentNode === null ?</description>
    </item>
    
    <item>
      <title>javascript数组</title>
      <link>https://mannuan.github.io/post/20190710110242/</link>
      <pubDate>Wed, 10 Jul 2019 11:02:42 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190710110242/</guid>
      <description>与 Java 、PHP 等语言不同，在 JavaScript 中，数组其实是一种特殊的对象。
数组的创建与读写 以下两种方式都可创建数组：
// 字面量方式,常用 var num = [1,5,6,10]; print(num.length); // 4  // 构造函数方式 var num = new Array(1,5,6,10); print(num.length); // 4  值得注意的是，JavaScript 中的数组数据可以是不同类型，它的语法相对宽松，例如可以指定不同类型数据var example = [1,&amp;quot;Mike&amp;quot;,true,null];另外，可以通过Array.isArray()来判断一个对象是否是数组，例如：
var num = [1,5,6,10]; print(Array.isArray(num)); // true  如何读写数组呢？可以使用循环。
var num = [1,5,6,10]; for (var i = 0; i &amp;lt; num.length; i++) { console.log(num[i]+&amp;#34; &amp;#34;); }  数组的深复制与浅复制 当我们把数组赋给另外一个数组，然后改变其中一个数组的值，另一数组也会随之改变，这就是数组的浅复制。而深复制指的就是不改变原来的数组而去创建一个新的数组，这种情况是经常使用的，为了不破坏原数组。下面的代码展示了这两种复制
// 浅复制 var num = [1,2,3,4,5]; var newNum = num; num[0] = 10; console.</description>
    </item>
    
  </channel>
</rss>