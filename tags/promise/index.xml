<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>promise on mannuan</title>
    <link>https://mannuan.github.io/tags/promise/</link>
    <description>Recent content in promise on mannuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 28 Jun 2019 22:05:48 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/tags/promise/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>验证Promise是同步的</title>
      <link>https://mannuan.github.io/post/20190628220548/</link>
      <pubDate>Fri, 28 Jun 2019 22:05:48 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190628220548/</guid>
      <description>前言 Promise是ES6提出的解决异步编程导致陷入回调的地狱问题。
例子1 console.log(1); var a=new Promise(function(resolve, reject){ console.log(2); resolve(); }); console.log(2); var b = new Promise(function(resolve, reject){ console.log(4); resolve(); }); console.log(5); a.then(function(){ console.log(6); }); b.then(function(){ console.log(7); });   顺序输出：1~7
 例子2 console.log(1); var a = new Promise(function(resolve, reject){ resolve(); console.log(2); }); a.then(function(){ console.log(6); }); console.log(3); var b = new Promise(function(resolve, reject){ resolve(); console.log(4); }); b.then(function(){ console.log(7); }); console.log(5);   顺序输出：1~7
 结论 Promise本身是同步的，但.then和.catch方法是异步的</description>
    </item>
    
  </channel>
</rss>