<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>排序 on mannuan</title>
    <link>https://mannuan.github.io/tags/%E6%8E%92%E5%BA%8F/</link>
    <description>Recent content in 排序 on mannuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 24 Aug 2019 22:48:19 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/tags/%E6%8E%92%E5%BA%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>快速排序</title>
      <link>https://mannuan.github.io/post/20190824224818/</link>
      <pubDate>Sat, 24 Aug 2019 22:48:19 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190824224818/</guid>
      <description>快速排序 过程描述 对数组的每一个部分，分别根据base进行元素的划分
在元素的划分过程中，需要借助两个指针i,j; 分别向后和向前移动
javascript实现 function partion(arr, left, right){ let base = arr[left]; let i = left; let j = right; while(i&amp;lt;j){ while(arr[j]&amp;gt;=base&amp;amp;&amp;amp;i&amp;lt;j){ j--; } while(arr[i]&amp;lt;=base&amp;amp;&amp;amp;i&amp;lt;j){ i++; } let tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } arr[left] = arr[i]; arr[i] = base; return i; } function quickSort(arr, left, right){ if(left &amp;lt; right){ let m = partion(arr, left, right); quickSort(arr, left, m); quickSort(arr, m+1,right); } }  c++实现 # include&amp;lt;iostream&amp;gt;  # include&amp;lt;cstring&amp;gt;  # include&amp;lt;cstdlib&amp;gt;  using namespace std; int partion(int arr[], int left, int right){ int base = arr[left]; int i = left; int j = right; while(i&amp;lt;j){ while(arr[j]&amp;gt;=base&amp;amp;&amp;amp;i&amp;lt;j){ j--; } while(arr[i]&amp;lt;=base&amp;amp;&amp;amp;i&amp;lt;j){ i++; } int tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } arr[left] = arr[i]; arr[i] = base; return i; } void quickSort(int arr[], int left, int right){ if(left &amp;lt; right){ int m = partion(arr, left, right); quickSort(arr, left, m); quickSort(arr, m+1, right); } } int main(){ const int n = 10; int arr[n] = {0}; for(int i=0;i&amp;lt;n;i++){ arr[i] = rand() % n + 0; } for(int i=0;i&amp;lt;n;i++){ cout&amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } cout&amp;lt;&amp;lt;endl; quickSort(arr, 0, n); for(int i=0;i&amp;lt;n;i++){ cout&amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } cout&amp;lt;&amp;lt;endl; return 0; }  python实现 import random arr = [random.</description>
    </item>
    
    <item>
      <title>冒泡排序、选择排序和插入排序的比较</title>
      <link>https://mannuan.github.io/post/20190603215721/</link>
      <pubDate>Mon, 03 Jun 2019 21:57:21 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190603215721/</guid>
      <description> 冒泡排序 算法流程 假设存在一个长度为N的数组，按照从左至右的顺序升序排列。首先，通过N-1次数
javascript代码 function bubbleSort(){ var arr = arguments[0]; for(var end=arr.length-1; end&amp;gt;0; end--){ for(var i=0; i&amp;lt;end; i++){ if(arr[i] &amp;gt; arr[end]){ var tmp = arr[i]; arr[i] = arr[end]; arr[end] = tmp; } } } } function randomNum(max=100, start=33){ return Math.floor(Math.random() * max + start); } var arr = []; var length = randomNum(30, 1); for(var i=0; i&amp;lt;length; i++){ // 创建随机数组  arr.push(randomNum()); } console.log(arr); bubbleSort(arr); console.log(arr);  选择排序 </description>
    </item>
    
  </channel>
</rss>