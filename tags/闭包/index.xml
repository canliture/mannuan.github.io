<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>闭包 on mannuan</title>
    <link>https://mannuan.github.io/tags/%E9%97%AD%E5%8C%85/</link>
    <description>Recent content in 闭包 on mannuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 27 May 2019 14:04:01 +0800</lastBuildDate>
    
	<atom:link href="https://mannuan.github.io/tags/%E9%97%AD%E5%8C%85/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用闭包实现命令模式</title>
      <link>https://mannuan.github.io/post/20190527140401/</link>
      <pubDate>Mon, 27 May 2019 14:04:01 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190527140401/</guid>
      <description>var Tv = { open: function(){ console.log(&amp;#39;打开电视机&amp;#39;); }, close: function(){ console.log(&amp;#39;关上电视机&amp;#39;); }, }; var OpenTvCommand = function(receiver){ this.receiver = receiver; }; OpenTvCommand.prototype.execute = function(){ this.receiver.open(); // 执行命令，打开电视机 }; OpenTvCommand.prototype.undo = function(){ this.receiver.close(); // 撤销命令，关闭电视机 }; command = new OpenTvCommand(Tv); command.execute() // 输出：打开电视机 command.undo() // 输出：关上电视机  博客参考自JavaScript设计模式与开发实践，[p41-p42]</description>
    </item>
    
    <item>
      <title>闭包和面向对象设计的等价实现举例</title>
      <link>https://mannuan.github.io/post/20190527113008/</link>
      <pubDate>Mon, 27 May 2019 11:30:08 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190527113008/</guid>
      <description>下面这段是闭包的代码：
var extent = function(){ var value = 0; return { call: function(){ value++; console.log(value); } } }; var extent = extent(); extent.call(); // 输出：1 extent.call(); // 输出：2 extent.call(); // 输出：3  转换成面向对象的写法是：
var extent = { value: 0, call: function(){ this.value++; console.log(this.value); } }; extent.call(); // 输出：1 extent.call(); // 输出：2 extent.call(); // 输出：3  原型链写法：
var extent = function(){ this.value = 0; }; Extent.prototype.call = function(){ this.value++; console.log(this.value); } var extent = new Extent(); extent.</description>
    </item>
    
    <item>
      <title>javascript闭包详解</title>
      <link>https://mannuan.github.io/post/20190527104504/</link>
      <pubDate>Mon, 27 May 2019 10:45:04 +0800</pubDate>
      
      <guid>https://mannuan.github.io/post/20190527104504/</guid>
      <description>闭包的两个知识点：  变量搜索方向：在javascript中，函数可以创造函数作用域。在函数作用域里面可以看到外面的变量，而函数的外面无法访问到函数里面的变量。因此，在作用域里面的变量搜索方向是：自内向外。比如，下面这段代码就验证了这个搜索方向：  var a = 1; var func1 = function(){ var b = 2; var func2 = function(){ var c = 3; console.log(b); // 输出：2  console.log(a); // 输出：1  } func2(); console.log(c); // 输出：Uncaught ReferenceError: c is not defined }; func1();   变量的生存的周期：全局变量的生存周期是永久的，局部变量随着函数调用的结束而销毁。  // 例一 var func = function(){ var a = 1; // 退出函数后局部变量a将被销毁  console.log(a); }; func(); // 例二 var func = function(){ var a = 1; return function(){ a++; console.</description>
    </item>
    
  </channel>
</rss>